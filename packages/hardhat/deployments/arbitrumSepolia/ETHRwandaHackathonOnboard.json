{
  "address": "0x0b19DA881924165886F9a4E3d4d5A754Dd73b139",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserNotInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        }
      ],
      "name": "HackerDataEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        }
      ],
      "name": "HackerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "class",
          "type": "address"
        }
      ],
      "name": "HackerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "name": "RegistrationStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RwCollectibleTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RwETHTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RwTokenTransfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRegistrationsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "hackerAddresses",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "emails",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "numbers",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "lockAddresses",
          "type": "address[]"
        }
      ],
      "name": "batchRegisterHackers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "editHackerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHackers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "number",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct HackerData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAreRegistrationsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getHackerDataByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "number",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct HackerData",
          "name": "user",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        }
      ],
      "name": "getHackerNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "getIsEmailRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        }
      ],
      "name": "getIsHackerInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "getIsNumberRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getIsWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSalt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "initializeHackerProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockAddress",
          "type": "address"
        }
      ],
      "name": "registerHacker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isWhitelisted",
          "type": "bool"
        }
      ],
      "name": "setIsWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_areRegistrationsOpen",
          "type": "bool"
        }
      ],
      "name": "setRegistrationsStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "setSalt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3c4b00b1322284ef18c87ccfac72a0fa134c4ee4f384848f5dd96ca39e532b77",
  "receipt": {
    "to": null,
    "from": "0x87B010d21D0ee095Fe6916241C56dB98a4cc52cA",
    "contractAddress": "0x0b19DA881924165886F9a4E3d4d5A754Dd73b139",
    "transactionIndex": 3,
    "gasUsed": "2273535",
    "logsBloom": "0x
    "blockHash": "0xb0b943f90de190dc646af5876054830afef031b2f4debec71b3da15a544c4786",
    "transactionHash": "0x3c4b00b1322284ef18c87ccfac72a0fa134c4ee4f384848f5dd96ca39e532b77",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 90200474,
        "transactionHash": "0x3c4b00b1322284ef18c87ccfac72a0fa134c4ee4f384848f5dd96ca39e532b77",
        "address": "0x0b19DA881924165886F9a4E3d4d5A754Dd73b139",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000087b010d21d0ee095fe6916241c56db98a4cc52ca"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xb0b943f90de190dc646af5876054830afef031b2f4debec71b3da15a544c4786"
      }
    ],
    "blockNumber": 90200474,
    "cumulativeGasUsed": "3351445",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7c92af12a35ac62ec90ca00d384778d91557ed1d95b73a05a77d66c5b0a1f31e"
  ],
  "numDeployments": 1,
  "solcInputHash": "783b5fba13e5ef9ed3c384e69ab5c13d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"}],\"name\":\"HackerDataEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"}],\"name\":\"HackerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"name\":\"HackerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RwCollectibleTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RwETHTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RwTokenTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRegistrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"hackerAddresses\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"emails\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"lockAddresses\",\"type\":\"address[]\"}],\"name\":\"batchRegisterHackers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"editHackerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHackers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"number\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct HackerData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAreRegistrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getHackerDataByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"number\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct HackerData\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"}],\"name\":\"getHackerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"getIsEmailRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"}],\"name\":\"getIsHackerInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getIsNumberRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getIsWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"initializeHackerProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"registerHacker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhitelisted\",\"type\":\"bool\"}],\"name\":\"setIsWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_areRegistrationsOpen\",\"type\":\"bool\"}],\"name\":\"setRegistrationsStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"setSalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Danny Thomx \",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getIsEmailRegistered(string)\":{\"params\":{\"_email\":\"The email to check.\"},\"returns\":{\"_0\":\"True if the email has been used to register a hacker, false otherwise.\"}},\"getIsHackerInitialized(address)\":{\"params\":{\"_hackerAddress\":\"The address of the hacker.\"},\"returns\":{\"_0\":\"True if the hacker's profile is initialized, false otherwise.\"}},\"getIsNumberRegistered(uint256)\":{\"params\":{\"_number\":\"The phone number to check.\"},\"returns\":{\"_0\":\"True if the hacker is registered, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendEther(address,uint256)\":{\"params\":{\"_amount\":\"The amount of Ether to send.\",\"_to\":\"The address to send Ether to.\"}},\"transferERC20(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to transfer.\",\"_to\":\"The address to transfer tokens to.\",\"_token\":\"The ERC20 token contract.\"}},\"transferERC721(address,address,uint256)\":{\"params\":{\"_to\":\"The address to transfer tokens to.\",\"_token\":\"The ERC721 token contract.\",\"_tokenId\":\"The ID of the token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ETHRwanda Hackathon Registry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getIsEmailRegistered(string)\":{\"notice\":\"Checks if email has been used to register a hacker.\"},\"getIsHackerInitialized(address)\":{\"notice\":\"Checks if a hacker's profile is initialized.\"},\"getIsNumberRegistered(uint256)\":{\"notice\":\"Checks if a hacker is registered by phone number.\"},\"sendEther(address,uint256)\":{\"notice\":\"Sends Ether to a specified address.\"},\"transferERC20(address,address,uint256)\":{\"notice\":\"Transfers ERC20 tokens to a specified address.\"},\"transferERC721(address,address,uint256)\":{\"notice\":\"Transfers ERC721 tokens to a specified address.\"}},\"notice\":\"Manages the registration and data of hackers participating in the ETH Rwanda Hackathon.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HackerOnboard.sol\":\"ETHRwandaHackathonOnboard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/HackerOnboard.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"./Utilities.sol\\\"; // Adjust the path as necessary\\r\\n\\r\\ninterface IPublicLockV14 {\\r\\n /**\\r\\n   * Checks if the user has a non-expired key.\\r\\n   * @param _user The address of the key owner\\r\\n   */\\r\\n  function getHasValidKey(address _user) external view returns (bool);\\r\\n}\\r\\n\\r\\nstruct HackerData {\\r\\n    address hackerAddress;\\r\\n    string name;\\r\\n    bytes32 email;\\r\\n    bytes32 number;\\r\\n    address class;\\r\\n    bool initialized;\\r\\n}\\r\\n\\r\\n\\r\\nerror UserNotInitialized();\\r\\nerror UserNotRegistered();\\r\\nerror RegistrationsClosed();\\r\\nerror UserAlreadyRegistered();\\r\\nerror UserAlreadyRegisteredWithPhone();\\r\\nerror UserAlreadyRegisteredWithEmail();\\r\\nerror InsufficientBalance();\\r\\nerror TransferFailed();\\r\\nerror UnauthorizedAccess();\\r\\nerror AlreadyInitialized(); \\r\\nerror NotAddressOwner();\\r\\nerror InvalidNonce();\\r\\n\\r\\n\\r\\n/// @title ETHRwanda Hackathon Registry\\r\\n/// @notice Manages the registration and data of hackers participating in the ETH Rwanda Hackathon.\\r\\n/// @author Danny Thomx \\r\\ncontract ETHRwandaHackathonOnboard is Ownable, ReentrancyGuard, EIP712 {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    uint256 private nonce;\\r\\n    bytes32 private salt;\\r\\n    bool public areRegistrationsOpen = false;\\r\\n    string private constant SIGNING_DOMAIN = \\\"ETHRwandaHackathon\\\";\\r\\n    string private constant SIGNATURE_VERSION = \\\"1\\\";\\r\\n    uint256 public constant MAX_LOCKS = 6;\\r\\n\\r\\n    mapping(address => uint256) private hackerNonceByAddress;\\r\\n    mapping(bytes32 => HackerData) private hackersByPhone;\\r\\n    mapping(address => HackerData) private hackersByAddress;\\r\\n    mapping(bytes32 => address) private hackerEmailHashes;\\r\\n    mapping(bytes32 => address) private hackerNumberHashes;\\r\\n    mapping(address => bool) private whitelistedAddresses;\\r\\n\\r\\n    HackerData[] private users;\\r\\n    address[] private locks;\\r\\n\\r\\n    event HackerRegistered(address indexed hackerAddress, address class);\\r\\n    event HackerDataEdited(address indexed hackerAddress);\\r\\n    event RegistrationStatusChanged(bool isOpen);\\r\\n    event HackerInitialized(address indexed hackerAddress);\\r\\n    event RwETHTransfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event RwTokenTransfer(address indexed from, address indexed to, address indexed token, uint256 amount);\\r\\n    event RwCollectibleTransfer(address indexed from, address indexed to, address indexed token, uint256 tokenId);  \\r\\n\\r\\n    constructor(bytes32 _salt) Ownable(msg.sender) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\\r\\n        salt = _salt;\\r\\n        nonce = 1; // Start the global nonce at 1\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    modifier onlyInitialized() {\\r\\n        if (!hackersByAddress[msg.sender].initialized) revert UserNotInitialized();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function getHackerDataByAddress(address userAddress) external view returns (HackerData memory user) {\\r\\n        return hackersByAddress[userAddress];\\r\\n    }\\r\\n    function getHackerNonce(address _hackerAddress) external view returns (uint256) {\\r\\n        return hackerNonceByAddress[_hackerAddress];\\r\\n    }\\r\\n    function getAreRegistrationsOpen() external view returns (bool) {\\r\\n        return areRegistrationsOpen;\\r\\n    }\\r\\n    function getIsWhitelisted(address _address) public view returns (bool) {\\r\\n        return whitelistedAddresses[_address];\\r\\n    }\\r\\n    function getAllHackers() external view returns (HackerData[] memory) {\\r\\n        bool hasAccess = getIsWhitelisted(msg.sender);\\r\\n        if (!hasAccess) revert UnauthorizedAccess();\\r\\n        return users;\\r\\n    }\\r\\n    function getSalt() external view returns (bytes32) {\\r\\n        if(msg.sender != owner()) revert UnauthorizedAccess();\\r\\n        return salt;\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a hacker is registered by phone number.\\r\\n    /// @param _number The phone number to check.\\r\\n    /// @return True if the hacker is registered, false otherwise.\\r\\n    function getIsNumberRegistered(uint256 _number) external view returns (bool) {\\r\\n        bytes32 numberHash = Utilities._hashNumber(_number, salt);\\r\\n        return bytes(hackersByPhone[numberHash].name).length != 0; \\r\\n    }\\r\\n\\r\\n     /// @notice Checks if email has been used to register a hacker.\\r\\n    /// @param _email The email to check.\\r\\n    /// @return True if the email has been used to register a hacker, false otherwise.\\r\\n    function getIsEmailRegistered(string memory _email) external view returns (bool) {\\r\\n        bytes32 emailHash = Utilities._hashEmail(_email, salt);\\r\\n        return hackerEmailHashes[emailHash] != address(0);\\r\\n    } \\r\\n    \\r\\n    /// @notice Checks if a hacker's profile is initialized.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @return True if the hacker's profile is initialized, false otherwise.\\r\\n    function getIsHackerInitialized(address _hackerAddress) external view returns (bool) {\\r\\n        return hackersByAddress[_hackerAddress].initialized;\\r\\n    }\\r\\n\\r\\n    function setIsWhitelisted(address _address, bool _isWhitelisted) external onlyOwner {\\r\\n        whitelistedAddresses[_address] = _isWhitelisted;\\r\\n    }\\r\\n    function setRegistrationsStatus(bool _areRegistrationsOpen) external onlyOwner {\\r\\n        areRegistrationsOpen = _areRegistrationsOpen;\\r\\n        emit RegistrationStatusChanged(_areRegistrationsOpen);\\r\\n    }\\r\\n    function setSalt(bytes32 _salt) external onlyOwner {\\r\\n        salt = _salt;\\r\\n    }\\r\\n\\r\\n    function editHackerData(string memory _name, string memory _email, uint256 _number) external {\\r\\n        HackerData storage hackerData = hackersByAddress[msg.sender];\\r\\n        require(hackerData.initialized, \\\"UserNotInitialized\\\");\\r\\n\\r\\n        bytes32 oldNumberHash = hackerData.number;\\r\\n        bytes32 newNumberHash = Utilities._hashNumber(_number, salt);\\r\\n        if (oldNumberHash != newNumberHash) {\\r\\n            require(hackerNumberHashes[newNumberHash] == address(0), \\\"UserAlreadyRegisteredWithPhone\\\");\\r\\n            hackerNumberHashes[newNumberHash] = msg.sender;\\r\\n            delete hackerNumberHashes[oldNumberHash];\\r\\n        }\\r\\n\\r\\n        bytes32 oldEmailHash = hackerData.email;\\r\\n        bytes32 newEmailHash = Utilities._hashEmail(_email, salt); \\r\\n        if (oldEmailHash != newEmailHash) {\\r\\n            require(hackerEmailHashes[newEmailHash] == address(0), \\\"UserAlreadyRegisteredWithEmail\\\");\\r\\n            hackerEmailHashes[newEmailHash] = msg.sender;\\r\\n            delete hackerEmailHashes[oldEmailHash];\\r\\n        }\\r\\n\\r\\n        hackerData.name = _name;\\r\\n        hackerData.email = newEmailHash;\\r\\n        hackerData.number = newNumberHash;\\r\\n\\r\\n        emit HackerDataEdited(msg.sender);\\r\\n    }\\r\\n\\r\\n    function registerHacker(\\r\\n        address _hackerAddress,\\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number,\\r\\n        address _lockAddress\\r\\n    ) public {\\r\\n        require(areRegistrationsOpen, \\\"RegistrationsClosed\\\");\\r\\n        require(hackersByAddress[_hackerAddress].hackerAddress == address(0), \\\"UserAlreadyRegistered\\\");\\r\\n        bytes32 numberHash = Utilities._hashNumber(_number, salt); \\r\\n        require(hackerNumberHashes[numberHash] == address(0), \\\"UserAlreadyRegisteredWithPhone\\\");\\r\\n        bytes32 emailHash = Utilities._hashEmail(_email, salt);\\r\\n        require(hackerEmailHashes[emailHash] == address(0), \\\"UserAlreadyRegisteredWithEmail\\\");\\r\\n\\r\\n        HackerData memory newUser = HackerData({\\r\\n            hackerAddress: _hackerAddress,\\r\\n            name: _name,\\r\\n            email: emailHash,\\r\\n            number: numberHash,\\r\\n            class: _lockAddress,\\r\\n            initialized: false\\r\\n        });\\r\\n\\r\\n        hackersByPhone[numberHash] = newUser; \\r\\n        hackersByAddress[_hackerAddress] = newUser;\\r\\n        hackerEmailHashes[emailHash] = _hackerAddress; \\r\\n        hackerNumberHashes[numberHash] = _hackerAddress; \\r\\n        users.push(newUser);\\r\\n\\r\\n        // Initialize the user's nonce with the global nonce\\r\\n        hackerNonceByAddress[_hackerAddress] = nonce;\\r\\n        nonce++; // Increment the global nonce\\r\\n\\r\\n        emit HackerRegistered(_hackerAddress, _lockAddress);\\r\\n    }\\r\\n\\r\\n    function initializeHackerProfile(bytes memory _signature) external {\\r\\n        HackerData storage hackerData = hackersByAddress[msg.sender];\\r\\n        require(!hackerData.initialized, \\\"AlreadyInitialized\\\");\\r\\n        uint256 currentNonce = hackerNonceByAddress[msg.sender];\\r\\n\\r\\n        bytes32 structHash = keccak256(abi.encode(\\r\\n            keccak256(\\\"Hacker(address hackerAddress,uint256 nonce)\\\"),\\r\\n            msg.sender,\\r\\n            currentNonce\\r\\n        ));\\r\\n\\r\\n        bytes32 digest = _hashTypedDataV4(structHash);\\r\\n        address signer = digest.recover(_signature);\\r\\n        require(signer == msg.sender, \\\"NotAddressOwner\\\");\\r\\n\\r\\n        // Update hacker's address in storage\\r\\n        hackerData.hackerAddress = msg.sender;\\r\\n\\r\\n        // Update hacker's address in mappings\\r\\n        hackerEmailHashes[hackerData.email] = msg.sender;\\r\\n        hackerNumberHashes[hackerData.number] = msg.sender;\\r\\n\\r\\n        hackerNonceByAddress[msg.sender] = currentNonce; // Increment nonce after successful initialization\\r\\n        hackerData.initialized = true;\\r\\n\\r\\n        emit HackerInitialized(msg.sender);\\r\\n    }\\r\\n\\r\\n    function batchRegisterHackers(\\r\\n        address[] memory hackerAddresses,\\r\\n        string[] memory names,\\r\\n        string[] memory emails,\\r\\n        uint256[] memory numbers,\\r\\n        address[] memory lockAddresses\\r\\n    ) external onlyOwner {\\r\\n        require(areRegistrationsOpen, \\\"Registrations are closed\\\");\\r\\n        require(\\r\\n            hackerAddresses.length == names.length &&\\r\\n            names.length == emails.length &&\\r\\n            emails.length == numbers.length &&\\r\\n            numbers.length == lockAddresses.length,\\r\\n            \\\"Array lengths must match\\\"\\r\\n        );\\r\\n\\r\\n        for (uint256 i = 0; i < hackerAddresses.length; i++) {\\r\\n            registerHacker(\\r\\n                hackerAddresses[i],\\r\\n                names[i],\\r\\n                emails[i],\\r\\n                numbers[i],\\r\\n                lockAddresses[i]\\r\\n            );\\r\\n            emit HackerRegistered(hackerAddresses[i], lockAddresses[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sends Ether to a specified address.\\r\\n    /// @param _to The address to send Ether to.\\r\\n    /// @param _amount The amount of Ether to send.\\r\\n    function sendEther(address payable _to, uint256 _amount) external onlyInitialized {\\r\\n        if (address(this).balance < _amount) revert InsufficientBalance();\\r\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\r\\n        if (!success) revert TransferFailed();\\r\\n        emit RwETHTransfer(msg.sender, _to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ERC20 tokens to a specified address.\\r\\n    /// @param _token The ERC20 token contract.\\r\\n    /// @param _to The address to transfer tokens to.\\r\\n    /// @param _amount The amount of tokens to transfer.\\r\\n    function transferERC20(IERC20 _token, address _to, uint256 _amount) external onlyInitialized {\\r\\n        if (!_token.transferFrom(msg.sender, _to, _amount)) revert TransferFailed();\\r\\n        emit RwTokenTransfer(msg.sender, _to, address(_token), _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ERC721 tokens to a specified address.\\r\\n    /// @param _token The ERC721 token contract.\\r\\n    /// @param _to The address to transfer tokens to.\\r\\n    /// @param _tokenId The ID of the token to transfer.\\r\\n    function transferERC721(IERC721 _token, address _to, uint256 _tokenId) external onlyInitialized {\\r\\n        _token.safeTransferFrom(msg.sender, _to, _tokenId);\\r\\n        emit RwCollectibleTransfer(msg.sender, _to, address(_token), _tokenId);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xf2854eb869fdc92f313a01401ae21ab6d0338140c582e4d68fa17ae71a823306\",\"license\":\"MIT\"},\"contracts/Utilities.sol\":{\"content\":\"// // SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Utilities {\\r\\n    function _hashEmail(string memory _email, bytes32 salt) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_email, salt));\\r\\n    } \\r\\n\\r\\n    function _hashNumber(uint256 _number, bytes32 salt) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(_number, salt));\\r\\n    }\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x533da240baa222aaf3acf76733f4b4efcab0b914d7b05375a08fc27c24ce4b62\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526006805460ff191690553480156200001c57600080fd5b5060405162002a8838038062002a888339810160408190526200003f9162000248565b604080518082018252601281527122aa24293bb0b73230a430b1b5b0ba3437b760711b602080830191909152825180840190935260018352603160f81b90830152903380620000a957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000b4816200017c565b5060018055620000c6826002620001cc565b61012052620000d7816003620001cc565b61014052815160208084019190912060e052815190820120610100524660a0526200016560e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052600555600160045562000448565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602083511015620001ec57620001e48362000205565b9050620001ff565b81620001f9848262000307565b5060ff90505b92915050565b600080829050601f8151111562000233578260405163305a27a960e01b8152600401620000a09190620003d3565b8051620002408262000423565b179392505050565b6000602082840312156200025b57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200028d57607f821691505b602082108103620002ae57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200030257600081815260208120601f850160051c81016020861015620002dd5750805b601f850160051c820191505b81811015620002fe57828155600101620002e9565b5050505b505050565b81516001600160401b0381111562000323576200032362000262565b6200033b8162000334845462000278565b84620002b4565b602080601f8311600181146200037357600084156200035a5750858301515b600019600386901b1c1916600185901b178555620002fe565b600085815260208120601f198616915b82811015620003a45788860151825594840194600190910190840162000383565b5085821015620003c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b818110156200040257858101830151858201604001528201620003e4565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002ae5760001960209190910360031b1b16919050565b60805160a05160c05160e0516101005161012051610140516125e5620004a36000396000611831015260006117ff0152600061193101526000611909015260006118640152600061188e015260006118b801526125e56000f3fe6080604052600436106101695760003560e01c8063715018a6116100d1578063a24237d51161008a578063c74c91fb11610064578063c74c91fb14610468578063d322934314610488578063f2fde38b1461049d578063ff408543146104bd57600080fd5b8063a24237d5146103fb578063bb29ccc61461041b578063c1756a2c1461044857600080fd5b8063715018a61461031d57806384b0196e146103325780638da5cb5b1461035a578063938f296c1461038257806396a24484146103bb5780639db5dbe4146103db57600080fd5b80631e9f45a5116101235780631e9f45a5146102455780631fa4dc52146102655780633de2c4831461028f57806351c732b0146102c5578063611ef44f146102e557806369254d401461030557600080fd5b8062a170c914610175578063031a66b61461019757806309ec923a146101c257806309fdf02e146101e257806313a9589c146102025780631aca63761461022557600080fd5b3661017057005b600080fd5b34801561018157600080fd5b50610195610190366004611c7b565b610500565b005b3480156101a357600080fd5b506101ac61054f565b6040516101b99190611d50565b60405180910390f35b3480156101ce57600080fd5b506101956101dd366004611dc7565b6106c8565b3480156101ee57600080fd5b506101956101fd366004611ebf565b6106fb565b34801561020e57600080fd5b50610217610919565b6040519081526020016101b9565b34801561023157600080fd5b50610195610240366004611f2c565b61094c565b34801561025157600080fd5b50610195610260366004611f6d565b610a4a565b34801561027157600080fd5b5060065461027f9060ff1681565b60405190151581526020016101b9565b34801561029b57600080fd5b506102176102aa366004611fbe565b6001600160a01b031660009081526007602052604090205490565b3480156102d157600080fd5b506101956102e0366004611fdb565b610c10565b3480156102f157600080fd5b50610195610300366004612070565b611062565b34801561031157600080fd5b5060065460ff1661027f565b34801561032957600080fd5b5061019561106f565b34801561033e57600080fd5b50610347611083565b6040516101b99796959493929190612089565b34801561036657600080fd5b506000546040516001600160a01b0390911681526020016101b9565b34801561038e57600080fd5b5061027f61039d366004611fbe565b6001600160a01b03166000908152600c602052604090205460ff1690565b3480156103c757600080fd5b5061027f6103d6366004612070565b6110c9565b3480156103e757600080fd5b506101956103f6366004611f2c565b611102565b34801561040757600080fd5b5061027f61041636600461211f565b611221565b34801561042757600080fd5b5061043b610436366004611fbe565b611251565b6040516101b99190612154565b34801561045457600080fd5b50610195610463366004612167565b611382565b34801561047457600080fd5b50610195610483366004612306565b611496565b34801561049457600080fd5b50610217600681565b3480156104a957600080fd5b506101956104b8366004611fbe565b61169a565b3480156104c957600080fd5b5061027f6104d8366004611fbe565b6001600160a01b0316600090815260096020526040902060040154600160a01b900460ff1690565b6105086116d8565b6006805460ff19168215159081179091556040519081527f1a30f630d0950ddfc90d43ec4e405fd012ddb4ba669dd2bd5e95439631c4221f9060200160405180910390a150565b336000908152600c602052604090205460609060ff168061058357604051631a27eac360e11b815260040160405180910390fd5b600d805480602002602001604051908101604052809291908181526020016000905b828210156106be5760008481526020908190206040805160c081019091526005850290910180546001600160a01b0316825260018101805492939192918401916105ee906123d8565b80601f016020809104026020016040519081016040528092919081815260200182805461061a906123d8565b80156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b50505091835250506002820154602080830191909152600383015460408301526004909201546001600160a01b0381166060830152600160a01b900460ff16151560809091015290825260019290920191016105a5565b5050505091505090565b6106d06116d8565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b3360009081526009602052604090206004810154600160a01b900460ff1661075f5760405162461bcd60e51b8152602060048201526012602482015271155cd95c939bdd125b9a5d1a585b1a5e995960721b60448201526064015b60405180910390fd5b600081600301549050600061077684600554611705565b9050808214610813576000818152600b60205260409020546001600160a01b0316156107e45760405162461bcd60e51b815260206004820152601e60248201527f55736572416c7265616479526567697374657265645769746850686f6e6500006044820152606401610756565b6000818152600b602052604080822080546001600160a01b031990811633179091558483529120805490911690555b600083600201549050600061082a8760055461173c565b90508082146108c7576000818152600a60205260409020546001600160a01b0316156108985760405162461bcd60e51b815260206004820152601e60248201527f55736572416c72656164795265676973746572656457697468456d61696c00006044820152606401610756565b6000818152600a602052604080822080546001600160a01b031990811633179091558483529120805490911690555b600185016108d5898261245d565b50600285018190556003850183905560405133907f899e426a1145f5a7442566cb6f469b4a55da6844560a30d29ef1ed98e4387cac90600090a25050505050505050565b600080546001600160a01b0316331461094557604051631a27eac360e11b815260040160405180910390fd5b5060055490565b33600090815260096020526040902060040154600160a01b900460ff1661098657604051630a0e3b7560e21b815260040160405180910390fd5b604051632142170760e11b81523360048201526001600160a01b038381166024830152604482018390528416906342842e0e90606401600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b50505050826001600160a01b0316826001600160a01b0316336001600160a01b03167fa7418bd3094e0f5ece1f8051255ef65d992cefcb0631709d897d8a859442f92984604051610a3d91815260200190565b60405180910390a4505050565b3360009081526009602052604090206004810154600160a01b900460ff1615610aaa5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e525b9a5d1a585b1a5e995960721b6044820152606401610756565b3360008181526007602090815260408083205481517f8436e0b04c93157f90a55acb9c14dc3f4dfb2f28f2f94c63c091f411286818a19381019390935290820193909352606081018390526080016040516020818303038152906040528051906020012090506000610b1b82611751565b90506000610b29828761177e565b90506001600160a01b0381163314610b755760405162461bcd60e51b815260206004820152600f60248201526e2737ba20b2323932b9b9a7bbb732b960891b6044820152606401610756565b84546001600160a01b031990811633908117875560028701546000908152600a60209081526040808320805486168517905560038a01548352600b8252808320805490951684179094558282526007905282812087905560048801805460ff60a01b1916600160a01b179055915190917f03a11e363798d177d3b70e778154773018cf4669a4ecf1fdbacd173248bb464e91a2505050505050565b60065460ff16610c585760405162461bcd60e51b8152602060048201526013602482015272149959da5cdd1c985d1a5bdb9cd0db1bdcd959606a1b6044820152606401610756565b6001600160a01b038581166000908152600960205260409020541615610cb85760405162461bcd60e51b8152602060048201526015602482015274155cd95c905b1c9958591e549959da5cdd195c9959605a1b6044820152606401610756565b6000610cc683600554611705565b6000818152600b60205260409020549091506001600160a01b031615610d2e5760405162461bcd60e51b815260206004820152601e60248201527f55736572416c7265616479526567697374657265645769746850686f6e6500006044820152606401610756565b6000610d3c8560055461173c565b6000818152600a60205260409020549091506001600160a01b031615610da45760405162461bcd60e51b815260206004820152601e60248201527f55736572416c72656164795265676973746572656457697468456d61696c00006044820152606401610756565b6040805160c0810182526001600160a01b03898116825260208083018a8152838501869052606084018790528783166080850152600060a085018190528781526008909252939020825181546001600160a01b03191692169190911781559151909182916001820190610e17908261245d565b5060408281015160028301556060830151600383015560808301516004909201805460a0909401511515600160a01b026001600160a81b03199094166001600160a01b0393841617939093179092558981166000908152600960209081529290208351815492166001600160a01b031992909216919091178155908201518291906001820190610ea7908261245d565b5060408281015160028301556060830151600383015560808301516004909201805460a0909401511515600160a01b026001600160a81b03199094166001600160a01b0393841617939093179092556000848152600a602090815283822080548d85166001600160a01b03199182168117909255888452600b8352948320805486169091179055600d80546001810182559252845160059092027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb581018054939094169290941691909117825583015183927fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb60190610fa6908261245d565b5060408281015160028301556060830151600383015560808301516004928301805460a0909501511515600160a01b026001600160a81b03199095166001600160a01b0392831617949094179093558154928b16600090815260076020529081208390556110138361251d565b90915550506040516001600160a01b0385811682528916907f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c9060200160405180910390a25050505050505050565b61106a6116d8565b600555565b6110776116d8565b61108160006117a8565b565b6000606080600080600060606110976117f8565b61109f61182a565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6000806110d883600554611705565b60008181526008602052604090206001018054919250906110f8906123d8565b1515949350505050565b33600090815260096020526040902060040154600160a01b900460ff1661113c57604051630a0e3b7560e21b815260040160405180910390fd5b6040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018390528416906323b872dd906064016020604051808303816000875af1158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190612544565b6111d2576040516312171d8360e31b815260040160405180910390fd5b826001600160a01b0316826001600160a01b0316336001600160a01b03167fb7a2adcaba30b7e13cf165014f76f31abfa2b823191171dabef01298a02f5b1484604051610a3d91815260200190565b6000806112308360055461173c565b6000908152600a60205260409020546001600160a01b031615159392505050565b6040805160c080820183526000808352606060208085018290528486018390529084018290526080840182905260a084018290526001600160a01b038681168352600982529185902085519384019095528454909116825260018401805493949293918401916112c0906123d8565b80601f01602080910402602001604051908101604052809291908181526020018280546112ec906123d8565b80156113395780601f1061130e57610100808354040283529160200191611339565b820191906000526020600020905b81548152906001019060200180831161131c57829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b0381166060830152600160a01b900460ff16151560809091015292915050565b33600090815260096020526040902060040154600160a01b900460ff166113bc57604051630a0e3b7560e21b815260040160405180910390fd5b804710156113dd57604051631e9acf1760e31b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461142a576040519150601f19603f3d011682016040523d82523d6000602084013e61142f565b606091505b5050905080611451576040516312171d8360e31b815260040160405180910390fd5b6040518281526001600160a01b0384169033907f0ed2f25f2e8fac60d5a381e78fd218e041217d544665747acac4cb9ab8e9c6179060200160405180910390a3505050565b61149e6116d8565b60065460ff166114f05760405162461bcd60e51b815260206004820152601860248201527f526567697374726174696f6e732061726520636c6f73656400000000000000006044820152606401610756565b83518551148015611502575082518451145b801561150f575081518351145b801561151c575080518251145b6115685760405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606401610756565b60005b8551811015611692576115fe86828151811061158957611589612561565b60200260200101518683815181106115a3576115a3612561565b60200260200101518684815181106115bd576115bd612561565b60200260200101518685815181106115d7576115d7612561565b60200260200101518686815181106115f1576115f1612561565b6020026020010151610c10565b85818151811061161057611610612561565b60200260200101516001600160a01b03167f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c83838151811061165457611654612561565b602002602001015160405161167891906001600160a01b0391909116815260200190565b60405180910390a28061168a8161251d565b91505061156b565b505050505050565b6116a26116d8565b6001600160a01b0381166116cc57604051631e4fbdf760e01b815260006004820152602401610756565b6116d5816117a8565b50565b6000546001600160a01b031633146110815760405163118cdaa760e01b8152336004820152602401610756565b60408051602081018490529081018290526000906060015b6040516020818303038152906040528051906020012090505b92915050565b6000828260405160200161171d929190612577565b600061173661175e611857565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061178e8686611982565b92509250925061179e82826119cf565b5090949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606118257f00000000000000000000000000000000000000000000000000000000000000006002611a8c565b905090565b60606118257f00000000000000000000000000000000000000000000000000000000000000006003611a8c565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156118b057507f000000000000000000000000000000000000000000000000000000000000000046145b156118da57507f000000000000000000000000000000000000000000000000000000000000000090565b611825604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080600083516041036119bc5760208401516040850151606086015160001a6119ae88828585611b37565b9550955095505050506119c8565b50508151600091506002905b9250925092565b60008260038111156119e3576119e3612599565b036119ec575050565b6001826003811115611a0057611a00612599565b03611a1e5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611a3257611a32612599565b03611a535760405163fce698f760e01b815260048101829052602401610756565b6003826003811115611a6757611a67612599565b03611a88576040516335e2f38360e21b815260048101829052602401610756565b5050565b606060ff8314611aa657611a9f83611c06565b9050611736565b818054611ab2906123d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ade906123d8565b8015611b2b5780601f10611b0057610100808354040283529160200191611b2b565b820191906000526020600020905b815481529060010190602001808311611b0e57829003601f168201915b50505050509050611736565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611b725750600091506003905082611bfc565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611bc6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611bf257506000925060019150829050611bfc565b9250600091508190505b9450945094915050565b60606000611c1383611c45565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561173657604051632cd44ac360e21b815260040160405180910390fd5b80151581146116d557600080fd5b600060208284031215611c8d57600080fd5b8135611c9881611c6d565b9392505050565b60005b83811015611cba578181015183820152602001611ca2565b50506000910152565b60008151808452611cdb816020860160208601611c9f565b601f01601f19169290920160200192915050565b600060018060a01b03808351168452602083015160c06020860152611d1760c0860182611cc3565b9050604084015160408601526060840151606086015281608085015116608086015260a0840151151560a0860152809250505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611da557603f19888603018452611d93858351611cef565b94509285019290850190600101611d77565b5092979650505050505050565b6001600160a01b03811681146116d557600080fd5b60008060408385031215611dda57600080fd5b8235611de581611db2565b91506020830135611df581611c6d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e3f57611e3f611e00565b604052919050565b600067ffffffffffffffff831115611e6157611e61611e00565b611e74601f8401601f1916602001611e16565b9050828152838383011115611e8857600080fd5b828260208301376000602084830101529392505050565b600082601f830112611eb057600080fd5b611c9883833560208501611e47565b600080600060608486031215611ed457600080fd5b833567ffffffffffffffff80821115611eec57600080fd5b611ef887838801611e9f565b94506020860135915080821115611f0e57600080fd5b50611f1b86828701611e9f565b925050604084013590509250925092565b600080600060608486031215611f4157600080fd5b8335611f4c81611db2565b92506020840135611f5c81611db2565b929592945050506040919091013590565b600060208284031215611f7f57600080fd5b813567ffffffffffffffff811115611f9657600080fd5b8201601f81018413611fa757600080fd5b611fb684823560208401611e47565b949350505050565b600060208284031215611fd057600080fd5b8135611c9881611db2565b600080600080600060a08688031215611ff357600080fd5b8535611ffe81611db2565b9450602086013567ffffffffffffffff8082111561201b57600080fd5b61202789838a01611e9f565b9550604088013591508082111561203d57600080fd5b5061204a88828901611e9f565b93505060608601359150608086013561206281611db2565b809150509295509295909350565b60006020828403121561208257600080fd5b5035919050565b60ff60f81b881681526000602060e0818401526120a960e084018a611cc3565b83810360408501526120bb818a611cc3565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561210d578351835292840192918401916001016120f1565b50909c9b505050505050505050505050565b60006020828403121561213157600080fd5b813567ffffffffffffffff81111561214857600080fd5b611fb684828501611e9f565b602081526000611c986020830184611cef565b6000806040838503121561217a57600080fd5b823561218581611db2565b946020939093013593505050565b600067ffffffffffffffff8211156121ad576121ad611e00565b5060051b60200190565b600082601f8301126121c857600080fd5b813560206121dd6121d883612193565b611e16565b82815260059290921b840181019181810190868411156121fc57600080fd5b8286015b8481101561222057803561221381611db2565b8352918301918301612200565b509695505050505050565b600082601f83011261223c57600080fd5b8135602061224c6121d883612193565b82815260059290921b8401810191818101908684111561226b57600080fd5b8286015b8481101561222057803567ffffffffffffffff81111561228f5760008081fd5b61229d8986838b0101611e9f565b84525091830191830161226f565b600082601f8301126122bc57600080fd5b813560206122cc6121d883612193565b82815260059290921b840181019181810190868411156122eb57600080fd5b8286015b8481101561222057803583529183019183016122ef565b600080600080600060a0868803121561231e57600080fd5b853567ffffffffffffffff8082111561233657600080fd5b61234289838a016121b7565b9650602088013591508082111561235857600080fd5b61236489838a0161222b565b9550604088013591508082111561237a57600080fd5b61238689838a0161222b565b9450606088013591508082111561239c57600080fd5b6123a889838a016122ab565b935060808801359150808211156123be57600080fd5b506123cb888289016121b7565b9150509295509295909350565b600181811c908216806123ec57607f821691505b60208210810361240c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561245857600081815260208120601f850160051c810160208610156124395750805b601f850160051c820191505b8181101561169257828155600101612445565b505050565b815167ffffffffffffffff81111561247757612477611e00565b61248b8161248584546123d8565b84612412565b602080601f8311600181146124c057600084156124a85750858301515b600019600386901b1c1916600185901b178555611692565b600085815260208120601f198616915b828110156124ef578886015182559484019460019091019084016124d0565b508582101561250d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161253d57634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561255657600080fd5b8151611c9881611c6d565b634e487b7160e01b600052603260045260246000fd5b60008351612589818460208801611c9f565b9190910191825250602001919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a961d5a69d79fb2c3ab3503e0f3eed5d40f88e6b4b65592da4fae0d618e9db5c64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106101695760003560e01c8063715018a6116100d1578063a24237d51161008a578063c74c91fb11610064578063c74c91fb14610468578063d322934314610488578063f2fde38b1461049d578063ff408543146104bd57600080fd5b8063a24237d5146103fb578063bb29ccc61461041b578063c1756a2c1461044857600080fd5b8063715018a61461031d57806384b0196e146103325780638da5cb5b1461035a578063938f296c1461038257806396a24484146103bb5780639db5dbe4146103db57600080fd5b80631e9f45a5116101235780631e9f45a5146102455780631fa4dc52146102655780633de2c4831461028f57806351c732b0146102c5578063611ef44f146102e557806369254d401461030557600080fd5b8062a170c914610175578063031a66b61461019757806309ec923a146101c257806309fdf02e146101e257806313a9589c146102025780631aca63761461022557600080fd5b3661017057005b600080fd5b34801561018157600080fd5b50610195610190366004611c7b565b610500565b005b3480156101a357600080fd5b506101ac61054f565b6040516101b99190611d50565b60405180910390f35b3480156101ce57600080fd5b506101956101dd366004611dc7565b6106c8565b3480156101ee57600080fd5b506101956101fd366004611ebf565b6106fb565b34801561020e57600080fd5b50610217610919565b6040519081526020016101b9565b34801561023157600080fd5b50610195610240366004611f2c565b61094c565b34801561025157600080fd5b50610195610260366004611f6d565b610a4a565b34801561027157600080fd5b5060065461027f9060ff1681565b60405190151581526020016101b9565b34801561029b57600080fd5b506102176102aa366004611fbe565b6001600160a01b031660009081526007602052604090205490565b3480156102d157600080fd5b506101956102e0366004611fdb565b610c10565b3480156102f157600080fd5b50610195610300366004612070565b611062565b34801561031157600080fd5b5060065460ff1661027f565b34801561032957600080fd5b5061019561106f565b34801561033e57600080fd5b50610347611083565b6040516101b99796959493929190612089565b34801561036657600080fd5b506000546040516001600160a01b0390911681526020016101b9565b34801561038e57600080fd5b5061027f61039d366004611fbe565b6001600160a01b03166000908152600c602052604090205460ff1690565b3480156103c757600080fd5b5061027f6103d6366004612070565b6110c9565b3480156103e757600080fd5b506101956103f6366004611f2c565b611102565b34801561040757600080fd5b5061027f61041636600461211f565b611221565b34801561042757600080fd5b5061043b610436366004611fbe565b611251565b6040516101b99190612154565b34801561045457600080fd5b50610195610463366004612167565b611382565b34801561047457600080fd5b50610195610483366004612306565b611496565b34801561049457600080fd5b50610217600681565b3480156104a957600080fd5b506101956104b8366004611fbe565b61169a565b3480156104c957600080fd5b5061027f6104d8366004611fbe565b6001600160a01b0316600090815260096020526040902060040154600160a01b900460ff1690565b6105086116d8565b6006805460ff19168215159081179091556040519081527f1a30f630d0950ddfc90d43ec4e405fd012ddb4ba669dd2bd5e95439631c4221f9060200160405180910390a150565b336000908152600c602052604090205460609060ff168061058357604051631a27eac360e11b815260040160405180910390fd5b600d805480602002602001604051908101604052809291908181526020016000905b828210156106be5760008481526020908190206040805160c081019091526005850290910180546001600160a01b0316825260018101805492939192918401916105ee906123d8565b80601f016020809104026020016040519081016040528092919081815260200182805461061a906123d8565b80156106675780601f1061063c57610100808354040283529160200191610667565b820191906000526020600020905b81548152906001019060200180831161064a57829003601f168201915b50505091835250506002820154602080830191909152600383015460408301526004909201546001600160a01b0381166060830152600160a01b900460ff16151560809091015290825260019290920191016105a5565b5050505091505090565b6106d06116d8565b6001600160a01b03919091166000908152600c60205260409020805460ff1916911515919091179055565b3360009081526009602052604090206004810154600160a01b900460ff1661075f5760405162461bcd60e51b8152602060048201526012602482015271155cd95c939bdd125b9a5d1a585b1a5e995960721b60448201526064015b60405180910390fd5b600081600301549050600061077684600554611705565b9050808214610813576000818152600b60205260409020546001600160a01b0316156107e45760405162461bcd60e51b815260206004820152601e60248201527f55736572416c7265616479526567697374657265645769746850686f6e6500006044820152606401610756565b6000818152600b602052604080822080546001600160a01b031990811633179091558483529120805490911690555b600083600201549050600061082a8760055461173c565b90508082146108c7576000818152600a60205260409020546001600160a01b0316156108985760405162461bcd60e51b815260206004820152601e60248201527f55736572416c72656164795265676973746572656457697468456d61696c00006044820152606401610756565b6000818152600a602052604080822080546001600160a01b031990811633179091558483529120805490911690555b600185016108d5898261245d565b50600285018190556003850183905560405133907f899e426a1145f5a7442566cb6f469b4a55da6844560a30d29ef1ed98e4387cac90600090a25050505050505050565b600080546001600160a01b0316331461094557604051631a27eac360e11b815260040160405180910390fd5b5060055490565b33600090815260096020526040902060040154600160a01b900460ff1661098657604051630a0e3b7560e21b815260040160405180910390fd5b604051632142170760e11b81523360048201526001600160a01b038381166024830152604482018390528416906342842e0e90606401600060405180830381600087803b1580156109d657600080fd5b505af11580156109ea573d6000803e3d6000fd5b50505050826001600160a01b0316826001600160a01b0316336001600160a01b03167fa7418bd3094e0f5ece1f8051255ef65d992cefcb0631709d897d8a859442f92984604051610a3d91815260200190565b60405180910390a4505050565b3360009081526009602052604090206004810154600160a01b900460ff1615610aaa5760405162461bcd60e51b8152602060048201526012602482015271105b1c9958591e525b9a5d1a585b1a5e995960721b6044820152606401610756565b3360008181526007602090815260408083205481517f8436e0b04c93157f90a55acb9c14dc3f4dfb2f28f2f94c63c091f411286818a19381019390935290820193909352606081018390526080016040516020818303038152906040528051906020012090506000610b1b82611751565b90506000610b29828761177e565b90506001600160a01b0381163314610b755760405162461bcd60e51b815260206004820152600f60248201526e2737ba20b2323932b9b9a7bbb732b960891b6044820152606401610756565b84546001600160a01b031990811633908117875560028701546000908152600a60209081526040808320805486168517905560038a01548352600b8252808320805490951684179094558282526007905282812087905560048801805460ff60a01b1916600160a01b179055915190917f03a11e363798d177d3b70e778154773018cf4669a4ecf1fdbacd173248bb464e91a2505050505050565b60065460ff16610c585760405162461bcd60e51b8152602060048201526013602482015272149959da5cdd1c985d1a5bdb9cd0db1bdcd959606a1b6044820152606401610756565b6001600160a01b038581166000908152600960205260409020541615610cb85760405162461bcd60e51b8152602060048201526015602482015274155cd95c905b1c9958591e549959da5cdd195c9959605a1b6044820152606401610756565b6000610cc683600554611705565b6000818152600b60205260409020549091506001600160a01b031615610d2e5760405162461bcd60e51b815260206004820152601e60248201527f55736572416c7265616479526567697374657265645769746850686f6e6500006044820152606401610756565b6000610d3c8560055461173c565b6000818152600a60205260409020549091506001600160a01b031615610da45760405162461bcd60e51b815260206004820152601e60248201527f55736572416c72656164795265676973746572656457697468456d61696c00006044820152606401610756565b6040805160c0810182526001600160a01b03898116825260208083018a8152838501869052606084018790528783166080850152600060a085018190528781526008909252939020825181546001600160a01b03191692169190911781559151909182916001820190610e17908261245d565b5060408281015160028301556060830151600383015560808301516004909201805460a0909401511515600160a01b026001600160a81b03199094166001600160a01b0393841617939093179092558981166000908152600960209081529290208351815492166001600160a01b031992909216919091178155908201518291906001820190610ea7908261245d565b5060408281015160028301556060830151600383015560808301516004909201805460a0909401511515600160a01b026001600160a81b03199094166001600160a01b0393841617939093179092556000848152600a602090815283822080548d85166001600160a01b03199182168117909255888452600b8352948320805486169091179055600d80546001810182559252845160059092027fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb581018054939094169290941691909117825583015183927fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb60190610fa6908261245d565b5060408281015160028301556060830151600383015560808301516004928301805460a0909501511515600160a01b026001600160a81b03199095166001600160a01b0392831617949094179093558154928b16600090815260076020529081208390556110138361251d565b90915550506040516001600160a01b0385811682528916907f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c9060200160405180910390a25050505050505050565b61106a6116d8565b600555565b6110776116d8565b61108160006117a8565b565b6000606080600080600060606110976117f8565b61109f61182a565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b6000806110d883600554611705565b60008181526008602052604090206001018054919250906110f8906123d8565b1515949350505050565b33600090815260096020526040902060040154600160a01b900460ff1661113c57604051630a0e3b7560e21b815260040160405180910390fd5b6040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018390528416906323b872dd906064016020604051808303816000875af1158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190612544565b6111d2576040516312171d8360e31b815260040160405180910390fd5b826001600160a01b0316826001600160a01b0316336001600160a01b03167fb7a2adcaba30b7e13cf165014f76f31abfa2b823191171dabef01298a02f5b1484604051610a3d91815260200190565b6000806112308360055461173c565b6000908152600a60205260409020546001600160a01b031615159392505050565b6040805160c080820183526000808352606060208085018290528486018390529084018290526080840182905260a084018290526001600160a01b038681168352600982529185902085519384019095528454909116825260018401805493949293918401916112c0906123d8565b80601f01602080910402602001604051908101604052809291908181526020018280546112ec906123d8565b80156113395780601f1061130e57610100808354040283529160200191611339565b820191906000526020600020905b81548152906001019060200180831161131c57829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b0381166060830152600160a01b900460ff16151560809091015292915050565b33600090815260096020526040902060040154600160a01b900460ff166113bc57604051630a0e3b7560e21b815260040160405180910390fd5b804710156113dd57604051631e9acf1760e31b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461142a576040519150601f19603f3d011682016040523d82523d6000602084013e61142f565b606091505b5050905080611451576040516312171d8360e31b815260040160405180910390fd5b6040518281526001600160a01b0384169033907f0ed2f25f2e8fac60d5a381e78fd218e041217d544665747acac4cb9ab8e9c6179060200160405180910390a3505050565b61149e6116d8565b60065460ff166114f05760405162461bcd60e51b815260206004820152601860248201527f526567697374726174696f6e732061726520636c6f73656400000000000000006044820152606401610756565b83518551148015611502575082518451145b801561150f575081518351145b801561151c575080518251145b6115685760405162461bcd60e51b815260206004820152601860248201527f4172726179206c656e67746873206d757374206d6174636800000000000000006044820152606401610756565b60005b8551811015611692576115fe86828151811061158957611589612561565b60200260200101518683815181106115a3576115a3612561565b60200260200101518684815181106115bd576115bd612561565b60200260200101518685815181106115d7576115d7612561565b60200260200101518686815181106115f1576115f1612561565b6020026020010151610c10565b85818151811061161057611610612561565b60200260200101516001600160a01b03167f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c83838151811061165457611654612561565b602002602001015160405161167891906001600160a01b0391909116815260200190565b60405180910390a28061168a8161251d565b91505061156b565b505050505050565b6116a26116d8565b6001600160a01b0381166116cc57604051631e4fbdf760e01b815260006004820152602401610756565b6116d5816117a8565b50565b6000546001600160a01b031633146110815760405163118cdaa760e01b8152336004820152602401610756565b60408051602081018490529081018290526000906060015b6040516020818303038152906040528051906020012090505b92915050565b6000828260405160200161171d929190612577565b600061173661175e611857565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061178e8686611982565b92509250925061179e82826119cf565b5090949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606118257f00000000000000000000000000000000000000000000000000000000000000006002611a8c565b905090565b60606118257f00000000000000000000000000000000000000000000000000000000000000006003611a8c565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161480156118b057507f000000000000000000000000000000000000000000000000000000000000000046145b156118da57507f000000000000000000000000000000000000000000000000000000000000000090565b611825604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080600083516041036119bc5760208401516040850151606086015160001a6119ae88828585611b37565b9550955095505050506119c8565b50508151600091506002905b9250925092565b60008260038111156119e3576119e3612599565b036119ec575050565b6001826003811115611a0057611a00612599565b03611a1e5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611a3257611a32612599565b03611a535760405163fce698f760e01b815260048101829052602401610756565b6003826003811115611a6757611a67612599565b03611a88576040516335e2f38360e21b815260048101829052602401610756565b5050565b606060ff8314611aa657611a9f83611c06565b9050611736565b818054611ab2906123d8565b80601f0160208091040260200160405190810160405280929190818152602001828054611ade906123d8565b8015611b2b5780601f10611b0057610100808354040283529160200191611b2b565b820191906000526020600020905b815481529060010190602001808311611b0e57829003601f168201915b50505050509050611736565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611b725750600091506003905082611bfc565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611bc6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611bf257506000925060019150829050611bfc565b9250600091508190505b9450945094915050565b60606000611c1383611c45565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f81111561173657604051632cd44ac360e21b815260040160405180910390fd5b80151581146116d557600080fd5b600060208284031215611c8d57600080fd5b8135611c9881611c6d565b9392505050565b60005b83811015611cba578181015183820152602001611ca2565b50506000910152565b60008151808452611cdb816020860160208601611c9f565b601f01601f19169290920160200192915050565b600060018060a01b03808351168452602083015160c06020860152611d1760c0860182611cc3565b9050604084015160408601526060840151606086015281608085015116608086015260a0840151151560a0860152809250505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611da557603f19888603018452611d93858351611cef565b94509285019290850190600101611d77565b5092979650505050505050565b6001600160a01b03811681146116d557600080fd5b60008060408385031215611dda57600080fd5b8235611de581611db2565b91506020830135611df581611c6d565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e3f57611e3f611e00565b604052919050565b600067ffffffffffffffff831115611e6157611e61611e00565b611e74601f8401601f1916602001611e16565b9050828152838383011115611e8857600080fd5b828260208301376000602084830101529392505050565b600082601f830112611eb057600080fd5b611c9883833560208501611e47565b600080600060608486031215611ed457600080fd5b833567ffffffffffffffff80821115611eec57600080fd5b611ef887838801611e9f565b94506020860135915080821115611f0e57600080fd5b50611f1b86828701611e9f565b925050604084013590509250925092565b600080600060608486031215611f4157600080fd5b8335611f4c81611db2565b92506020840135611f5c81611db2565b929592945050506040919091013590565b600060208284031215611f7f57600080fd5b813567ffffffffffffffff811115611f9657600080fd5b8201601f81018413611fa757600080fd5b611fb684823560208401611e47565b949350505050565b600060208284031215611fd057600080fd5b8135611c9881611db2565b600080600080600060a08688031215611ff357600080fd5b8535611ffe81611db2565b9450602086013567ffffffffffffffff8082111561201b57600080fd5b61202789838a01611e9f565b9550604088013591508082111561203d57600080fd5b5061204a88828901611e9f565b93505060608601359150608086013561206281611db2565b809150509295509295909350565b60006020828403121561208257600080fd5b5035919050565b60ff60f81b881681526000602060e0818401526120a960e084018a611cc3565b83810360408501526120bb818a611cc3565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b8181101561210d578351835292840192918401916001016120f1565b50909c9b505050505050505050505050565b60006020828403121561213157600080fd5b813567ffffffffffffffff81111561214857600080fd5b611fb684828501611e9f565b602081526000611c986020830184611cef565b6000806040838503121561217a57600080fd5b823561218581611db2565b946020939093013593505050565b600067ffffffffffffffff8211156121ad576121ad611e00565b5060051b60200190565b600082601f8301126121c857600080fd5b813560206121dd6121d883612193565b611e16565b82815260059290921b840181019181810190868411156121fc57600080fd5b8286015b8481101561222057803561221381611db2565b8352918301918301612200565b509695505050505050565b600082601f83011261223c57600080fd5b8135602061224c6121d883612193565b82815260059290921b8401810191818101908684111561226b57600080fd5b8286015b8481101561222057803567ffffffffffffffff81111561228f5760008081fd5b61229d8986838b0101611e9f565b84525091830191830161226f565b600082601f8301126122bc57600080fd5b813560206122cc6121d883612193565b82815260059290921b840181019181810190868411156122eb57600080fd5b8286015b8481101561222057803583529183019183016122ef565b600080600080600060a0868803121561231e57600080fd5b853567ffffffffffffffff8082111561233657600080fd5b61234289838a016121b7565b9650602088013591508082111561235857600080fd5b61236489838a0161222b565b9550604088013591508082111561237a57600080fd5b61238689838a0161222b565b9450606088013591508082111561239c57600080fd5b6123a889838a016122ab565b935060808801359150808211156123be57600080fd5b506123cb888289016121b7565b9150509295509295909350565b600181811c908216806123ec57607f821691505b60208210810361240c57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561245857600081815260208120601f850160051c810160208610156124395750805b601f850160051c820191505b8181101561169257828155600101612445565b505050565b815167ffffffffffffffff81111561247757612477611e00565b61248b8161248584546123d8565b84612412565b602080601f8311600181146124c057600084156124a85750858301515b600019600386901b1c1916600185901b178555611692565b600085815260208120601f198616915b828110156124ef578886015182559484019460019091019084016124d0565b508582101561250d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161253d57634e487b7160e01b600052601160045260246000fd5b5060010190565b60006020828403121561255657600080fd5b8151611c9881611c6d565b634e487b7160e01b600052603260045260246000fd5b60008351612589818460208801611c9f565b9190910191825250602001919050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220a961d5a69d79fb2c3ab3503e0f3eed5d40f88e6b4b65592da4fae0d618e9db5c64736f6c63430008140033",
  "devdoc": {
    "author": "Danny Thomx ",
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getIsEmailRegistered(string)": {
        "params": {
          "_email": "The email to check."
        },
        "returns": {
          "_0": "True if the email has been used to register a hacker, false otherwise."
        }
      },
      "getIsHackerInitialized(address)": {
        "params": {
          "_hackerAddress": "The address of the hacker."
        },
        "returns": {
          "_0": "True if the hacker's profile is initialized, false otherwise."
        }
      },
      "getIsNumberRegistered(uint256)": {
        "params": {
          "_number": "The phone number to check."
        },
        "returns": {
          "_0": "True if the hacker is registered, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendEther(address,uint256)": {
        "params": {
          "_amount": "The amount of Ether to send.",
          "_to": "The address to send Ether to."
        }
      },
      "transferERC20(address,address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to transfer.",
          "_to": "The address to transfer tokens to.",
          "_token": "The ERC20 token contract."
        }
      },
      "transferERC721(address,address,uint256)": {
        "params": {
          "_to": "The address to transfer tokens to.",
          "_token": "The ERC721 token contract.",
          "_tokenId": "The ID of the token to transfer."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ETHRwanda Hackathon Registry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getIsEmailRegistered(string)": {
        "notice": "Checks if email has been used to register a hacker."
      },
      "getIsHackerInitialized(address)": {
        "notice": "Checks if a hacker's profile is initialized."
      },
      "getIsNumberRegistered(uint256)": {
        "notice": "Checks if a hacker is registered by phone number."
      },
      "sendEther(address,uint256)": {
        "notice": "Sends Ether to a specified address."
      },
      "transferERC20(address,address,uint256)": {
        "notice": "Transfers ERC20 tokens to a specified address."
      },
      "transferERC721(address,address,uint256)": {
        "notice": "Transfers ERC721 tokens to a specified address."
      }
    },
    "notice": "Manages the registration and data of hackers participating in the ETH Rwanda Hackathon.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 408,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1433,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1435,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2935,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2937,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "salt",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 2940,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "areRegistrationsOpen",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2953,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackerNonceByAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2958,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackersByPhone",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(HackerData)2899_storage)"
      },
      {
        "astId": 2963,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackersByAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(HackerData)2899_storage)"
      },
      {
        "astId": 2967,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackerEmailHashes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2971,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackerNumberHashes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2975,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2979,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "users",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(HackerData)2899_storage)dyn_storage"
      },
      {
        "astId": 2982,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "locks",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(HackerData)2899_storage)dyn_storage": {
        "base": "t_struct(HackerData)2899_storage",
        "encoding": "dynamic_array",
        "label": "struct HackerData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(HackerData)2899_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)2899_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(HackerData)2899_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)2899_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HackerData)2899_storage": {
        "encoding": "inplace",
        "label": "struct HackerData",
        "members": [
          {
            "astId": 2888,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "hackerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2890,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2892,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2894,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "number",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2896,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "class",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2898,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "initialized",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "address": "0x08D3aA2D1822262EBb2B52b2E7FaFd4d747f5590",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ECDSAInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "ECDSAInvalidSignatureLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "ECDSAInvalidSignatureS",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNonce",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidShortString",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAddressOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistrationsClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "str",
          "type": "string"
        }
      ],
      "name": "StringTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnauthorizedAccess",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyRegisteredWithEmail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyRegisteredWithPhone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserNotInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "EIP712DomainChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        }
      ],
      "name": "HackerDataEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        }
      ],
      "name": "HackerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "class",
          "type": "address"
        }
      ],
      "name": "HackerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "name": "RegistrationStatusChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRegistrationsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "editHackerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eip712Domain",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "fields",
          "type": "bytes1"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "verifyingContract",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "extensions",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHackers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "number",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct HackerData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAreRegistrationsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        }
      ],
      "name": "getHackerByEmail",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "number",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct HackerData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "getHackerByPhone",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "number",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct HackerData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getHackerDataByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "email",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "number",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "initialized",
              "type": "bool"
            }
          ],
          "internalType": "struct HackerData",
          "name": "user",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        }
      ],
      "name": "getHackerNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ownerAddress",
          "type": "address"
        }
      ],
      "name": "getSalt",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "initializeHackerProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        }
      ],
      "name": "isHackerInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "isHackerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockAddress",
          "type": "address"
        }
      ],
      "name": "registerHacker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_areRegistrationsOpen",
          "type": "bool"
        }
      ],
      "name": "setRegistrationsStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "setSalt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x63ac183b77128c692b7ca77ea3a16f35b38513f6cfb32fc192f9e439eb723cfd",
  "receipt": {
    "to": null,
    "from": "0x87B010d21D0ee095Fe6916241C56dB98a4cc52cA",
    "contractAddress": "0x08D3aA2D1822262EBb2B52b2E7FaFd4d747f5590",
    "transactionIndex": 1,
    "gasUsed": "1746075",
    "logsBloom": "0x
    "blockHash": "0x14022d98fa77dc7db218c987ded517a986e53f3c2abbd41076ce02260babffc2",
    "transactionHash": "0x63ac183b77128c692b7ca77ea3a16f35b38513f6cfb32fc192f9e439eb723cfd",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 89984353,
        "transactionHash": "0x63ac183b77128c692b7ca77ea3a16f35b38513f6cfb32fc192f9e439eb723cfd",
        "address": "0x08D3aA2D1822262EBb2B52b2E7FaFd4d747f5590",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000087b010d21d0ee095fe6916241c56db98a4cc52ca"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x14022d98fa77dc7db218c987ded517a986e53f3c2abbd41076ce02260babffc2"
      }
    ],
    "blockNumber": 89984353,
    "cumulativeGasUsed": "1746075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7c92af12a35ac62ec90ca00d384778d91557ed1d95b73a05a77d66c5b0a1f31e"
  ],
  "numDeployments": 1,
  "solcInputHash": "7b3cf3f46b14f292eb926137a8d1d851",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAddressOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistrationsClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedAccess\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyRegisteredWithEmail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyRegisteredWithPhone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"}],\"name\":\"HackerDataEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"}],\"name\":\"HackerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"name\":\"HackerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRegistrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"editHackerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHackers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"number\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct HackerData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAreRegistrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"}],\"name\":\"getHackerByEmail\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"number\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct HackerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"getHackerByPhone\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"number\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct HackerData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getHackerDataByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"email\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"number\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"internalType\":\"struct HackerData\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"}],\"name\":\"getHackerNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"getSalt\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"initializeHackerProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"}],\"name\":\"isHackerInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"isHackerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"registerHacker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_areRegistrationsOpen\",\"type\":\"bool\"}],\"name\":\"setRegistrationsStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"setSalt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"editHackerData(string,string,uint256)\":{\"params\":{\"_email\":\"The new email of the hacker.\",\"_name\":\"The new name of the hacker.\",\"_number\":\"The new phone number of the hacker.\"}},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getAllHackers()\":{\"returns\":{\"_0\":\"An array of HackerData containing all registered hackers.\"}},\"getAreRegistrationsOpen()\":{\"returns\":{\"_0\":\"True if registrations are open, false otherwise.\"}},\"getHackerDataByAddress(address)\":{\"params\":{\"userAddress\":\"The address of the hacker.\"},\"returns\":{\"user\":\"The HackerData associated with the address.\"}},\"getHackerNonce(address)\":{\"params\":{\"_hackerAddress\":\"The address of the hacker.\"},\"returns\":{\"_0\":\"The nonce associated with the hacker.\"}},\"initializeHackerProfile(bytes)\":{\"details\":\"Can only be called once by each hacker.\",\"params\":{\"_signature\":\"The signature of the message.    c\"}},\"isHackerInitialized(address)\":{\"params\":{\"_hackerAddress\":\"The address of the hacker.\"},\"returns\":{\"_0\":\"True if the hacker's profile is initialized, false otherwise.\"}},\"isHackerRegistered(uint256)\":{\"params\":{\"_number\":\"The phone number to check.\"},\"returns\":{\"_0\":\"True if the hacker is registered, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerHacker(address,string,string,uint256,address)\":{\"params\":{\"_email\":\"The email of the hacker.\",\"_lockAddress\":\"The class address associated with the hacker.\",\"_name\":\"The name of the hacker.\",\"_number\":\"The phone number of the hacker.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setRegistrationsStatus(bool)\":{\"details\":\"Only callable by the contract owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ETHRwanda Hackathon Registry\",\"version\":1},\"userdoc\":{\"events\":{\"HackerDataEdited(address)\":{\"notice\":\"Event emitted when a hacker's data is edited\"},\"HackerInitialized(address)\":{\"notice\":\"Event emitted when a hacker's profile is initialized\"},\"HackerRegistered(address,address)\":{\"notice\":\"Event emitted when a new hacker is registered\"},\"RegistrationStatusChanged(bool)\":{\"notice\":\"Event emitted when registration status is changed\"}},\"kind\":\"user\",\"methods\":{\"editHackerData(string,string,uint256)\":{\"notice\":\"Edits existing hacker data.\"},\"getAllHackers()\":{\"notice\":\"Retrieves all registered hackers.\"},\"getAreRegistrationsOpen()\":{\"notice\":\"Checks if registrations are open.\"},\"getHackerDataByAddress(address)\":{\"notice\":\"Retrieves hacker data by address.\"},\"getHackerNonce(address)\":{\"notice\":\"Retrieves the nonce for a specific hacker.\"},\"initializeHackerProfile(bytes)\":{\"notice\":\"Initializes a hacker's profile using EIP-712 typed data.\"},\"isHackerInitialized(address)\":{\"notice\":\"Checks if a hacker's profile is initialized.\"},\"isHackerRegistered(uint256)\":{\"notice\":\"Checks if a hacker is registered by phone number.\"},\"registerHacker(address,string,string,uint256,address)\":{\"notice\":\"Registers a new hacker.\"},\"setRegistrationsStatus(bool)\":{\"notice\":\"Opens or closes registrations.\"}},\"notice\":\"Manages the registration and data of hackers participating in the ETH Rwanda Hackathon.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HackerOnboard.sol\":\"ETHRwandaHackathonOnboard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n     * {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"./MessageHashUtils.sol\\\";\\nimport {ShortStrings, ShortString} from \\\"../ShortStrings.sol\\\";\\nimport {IERC5267} from \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _name which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Name() internal view returns (string memory) {\\n        return _name.toStringWithFallback(_nameFallback);\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: By default this function reads _version which is an immutable value.\\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _EIP712Version() internal view returns (string memory) {\\n        return _version.toStringWithFallback(_versionFallback);\\n    }\\n}\\n\",\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/HackerOnboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n\\r\\nerror UserNotInitialized();\\r\\nerror UserNotRegistered();\\r\\nerror RegistrationsClosed();\\r\\nerror UserAlreadyRegistered();\\r\\nerror UserAlreadyRegisteredWithPhone();\\r\\nerror UserAlreadyRegisteredWithEmail();\\r\\nerror InsufficientBalance();\\r\\nerror TransferFailed();\\r\\nerror UnauthorizedAccess();\\r\\nerror AlreadyInitialized();\\r\\nerror NotAddressOwner();\\r\\nerror InvalidNonce();\\r\\n\\r\\nstruct HackerData {\\r\\n    address hackerAddress;\\r\\n    string name;\\r\\n    bytes32 email;\\r\\n    bytes32 number; // Phone number\\r\\n    address class;\\r\\n    bool initialized;\\r\\n}\\r\\n\\r\\n/// @title ETHRwanda Hackathon Registry\\r\\n/// @notice Manages the registration and data of hackers participating in the ETH Rwanda Hackathon.\\r\\ncontract ETHRwandaHackathonOnboard is Ownable, ReentrancyGuard, EIP712 {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n\\r\\n    uint256 private nonce;\\r\\n    bytes32 private salt;\\r\\n    bool public areRegistrationsOpen = false; // State variable to track registration status\\r\\n    string private constant SIGNING_DOMAIN = \\\"ETHRwandaHackathon\\\"; // Define the EIP-712 domain separator\\r\\n    string private constant SIGNATURE_VERSION = \\\"1\\\";\\r\\n    uint256 public constant MAX_LOCKS = 6;\\r\\n\\r\\n    mapping(address => uint256) private hackerNonceByAddress;\\r\\n    mapping(bytes32 => HackerData) private hackersByPhone;\\r\\n    mapping(address => HackerData) private hackersByAddress;\\r\\n    mapping(bytes32 => address) hackerEmailHashes;\\r\\n    mapping(bytes32 => address) hackerNumberHashes;\\r\\n\\r\\n    HackerData[] private users; // List to store all users\\r\\n    address[] private locks; // Array to store lock addresses\\r\\n\\r\\n\\r\\n    /// @notice Event emitted when a new hacker is registered\\r\\n    event HackerRegistered(address indexed hackerAddress, address class);\\r\\n\\r\\n    /// @notice Event emitted when a hacker's data is edited\\r\\n    event HackerDataEdited(address indexed hackerAddress);\\r\\n\\r\\n    /// @notice Event emitted when registration status is changed\\r\\n    event RegistrationStatusChanged(bool isOpen);\\r\\n\\r\\n    /// @notice Event emitted when a hacker's profile is initialized\\r\\n    event HackerInitialized(address indexed hackerAddress);\\r\\n\\r\\n    constructor(bytes32 _salt) Ownable(msg.sender) EIP712(SIGNING_DOMAIN, SIGNATURE_VERSION) {\\r\\n        salt = _salt;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Modifier to check if the caller is a registered hacker.\\r\\n    modifier onlyHacker() {\\r\\n        if (hackersByAddress[msg.sender].hackerAddress != msg.sender) revert UnauthorizedAccess();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /// @notice Retrieves all registered hackers.\\r\\n    /// @return An array of HackerData containing all registered hackers.\\r\\n    function getAllHackers() external view returns (HackerData[] memory) {\\r\\n        // Access control can be added here if needed\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves hacker data by address.\\r\\n    /// @param userAddress The address of the hacker.\\r\\n    /// @return user The HackerData associated with the address.\\r\\n    function getHackerDataByAddress(address userAddress) external view returns (HackerData memory user) {\\r\\n        return hackersByAddress[userAddress];\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves the nonce for a specific hacker.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @return The nonce associated with the hacker.\\r\\n    function getHackerNonce(address _hackerAddress) external view returns (uint256) {\\r\\n        return hackerNonceByAddress[_hackerAddress];\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if registrations are open.\\r\\n    /// @return True if registrations are open, false otherwise.\\r\\n    function getAreRegistrationsOpen() external view returns (bool) {\\r\\n        return areRegistrationsOpen;\\r\\n    }\\r\\n    function getHackerByPhone(uint256 _number) external view returns (HackerData memory) {\\r\\n        bytes32 numberHash = _hashNumber(_number);\\r\\n        return hackersByAddress[hackerNumberHashes[numberHash]];\\r\\n    }\\r\\n    function getHackerByEmail(string memory _email) external view returns (HackerData memory) {\\r\\n        bytes32 emailHash = _hashEmail(_email); \\r\\n        return hackersByAddress[hackerEmailHashes[emailHash]];\\r\\n    }\\r\\n    function getSalt(address _ownerAddress) external view returns (bytes32) {\\r\\n        if(_ownerAddress != owner()) revert UnauthorizedAccess();\\r\\n        return salt;\\r\\n    }\\r\\n   \\r\\n    \\r\\n    /// @notice Opens or closes registrations.\\r\\n    /// @dev Only callable by the contract owner.\\r\\n    function setRegistrationsStatus(bool _areRegistrationsOpen) external onlyOwner {\\r\\n        areRegistrationsOpen = _areRegistrationsOpen;\\r\\n        emit RegistrationStatusChanged(_areRegistrationsOpen);\\r\\n    }\\r\\n\\r\\n    function setSalt(bytes32 _salt) external onlyOwner {\\r\\n        salt = _salt;\\r\\n    }\\r\\n    /// @notice Registers a new hacker.\\r\\n    /// @param _name The name of the hacker.\\r\\n    /// @param _email The email of the hacker.\\r\\n    /// @param _number The phone number of the hacker.\\r\\n    /// @param _lockAddress The class address associated with the hacker.\\r\\n    function registerHacker(\\r\\n        address _hackerAddress, \\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number,\\r\\n        address _lockAddress\\r\\n    ) external {\\r\\n        if (!areRegistrationsOpen) revert RegistrationsClosed();\\r\\n        if (hackersByAddress[_hackerAddress].hackerAddress != address(0)) revert UserAlreadyRegistered();\\r\\n\\r\\n        bytes32 numberHash = _hashNumber(_number);\\r\\n        bytes32 emailHash = _hashEmail(_email);\\r\\n        // Check if phone number is already registered\\r\\n        if (hackerNumberHashes[numberHash] != address(0)) revert UserAlreadyRegisteredWithPhone();\\r\\n\\r\\n        // Check if email is already registered\\r\\n        if (_isEmailRegistered(_hackerAddress, _email) || _isEmailRegistered(msg.sender, _email)) revert UserAlreadyRegisteredWithEmail(); \\r\\n\\r\\n        HackerData memory newUser = HackerData({\\r\\n            hackerAddress: msg.sender,\\r\\n            name: _name,\\r\\n            email: emailHash, \\r\\n            number: numberHash,\\r\\n            class: _lockAddress,\\r\\n            initialized: false\\r\\n        });\\r\\n\\r\\n        hackersByPhone[numberHash] = newUser; \\r\\n        hackersByAddress[msg.sender] = newUser;\\r\\n        users.push(newUser);\\r\\n\\r\\n        emit HackerRegistered(msg.sender, _lockAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Initializes a hacker's profile using EIP-712 typed data.\\r\\n    /// @dev Can only be called once by each hacker.\\r\\n    /// @param _signature The signature of the message.    c\\r\\n    function initializeHackerProfile( bytes memory _signature) external {\\r\\n        HackerData storage hackerData = hackersByAddress[msg.sender];\\r\\n        if (hackerData.initialized) revert AlreadyInitialized();\\r\\n        if (hackerNonceByAddress[msg.sender] != 0) revert InvalidNonce();\\r\\n\\r\\n        // Create the struct hash\\r\\n        bytes32 structHash = keccak256(abi.encode(\\r\\n            keccak256(\\\"Hacker(address hackerAddress,uint256 nonce)\\\"),\\r\\n            msg.sender,\\r\\n            nonce\\r\\n        ));\\r\\n\\r\\n        // Create the digest\\r\\n        bytes32 digest = _hashTypedDataV4(structHash);\\r\\n\\r\\n        // Recover the signer address from the signature\\r\\n        address signer = digest.recover(_signature);\\r\\n\\r\\n        // Check if the recovered address matches the provided hacker address\\r\\n        if (signer != msg.sender) revert NotAddressOwner();\\r\\n\\r\\n        hackerNonceByAddress[msg.sender] = nonce;\\r\\n        nonce++; // Increment nonce to prevent replay\\r\\n        hackerData.hackerAddress = msg.sender;\\r\\n        hackerData.initialized = true;\\r\\n        bytes32 emailHash = hackerData.email;\\r\\n        bytes32 numberHash = hackerData.number; \\r\\n    \\r\\n        // Store email and phone hashes\\r\\n        hackerEmailHashes[emailHash] = msg.sender;\\r\\n        hackerNumberHashes[numberHash] = msg.sender;\\r\\n        emit HackerInitialized(msg.sender); \\r\\n    }\\r\\n\\r\\n    /// @notice Edits existing hacker data.\\r\\n    /// @param _name The new name of the hacker.\\r\\n    /// @param _email The new email of the hacker.\\r\\n    /// @param _number The new phone number of the hacker.\\r\\n      function editHackerData(\\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number\\r\\n    ) external {\\r\\n        HackerData storage hackerData = hackersByAddress[msg.sender]; \\r\\n        if (!hackerData.initialized) revert UserNotInitialized();\\r\\n\\r\\n        // Check for duplicate phone number\\r\\n        bytes32 numberHash = _hashNumber(_number);\\r\\n        if (hackerNumberHashes[numberHash] != address(0) && hackerNumberHashes[numberHash] != msg.sender) {\\r\\n            revert UserAlreadyRegisteredWithPhone();\\r\\n        }\\r\\n\\r\\n        // Check for duplicate email\\r\\n        bytes32 emailHash = _hashEmail(_email);\\r\\n        bool isEmailRegistered = _isEmailRegistered(msg.sender, _email);\\r\\n        if (isEmailRegistered && hackerEmailHashes[emailHash] != msg.sender) revert UserAlreadyRegisteredWithEmail();\\r\\n\\r\\n        // Update phone mapping if the number has changed\\r\\n        if (hackerData.number != numberHash) {\\r\\n            hackerNumberHashes[numberHash] = msg.sender; \\r\\n            hackerData.number = numberHash; \\r\\n        }\\r\\n\\r\\n        // Update user data\\r\\n        hackerData.name = _name;\\r\\n        hackerData.email = emailHash;\\r\\n        hackerEmailHashes[emailHash] = msg.sender; // Update email hash\\r\\n\\r\\n        emit HackerDataEdited(msg.sender);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a hacker is registered by phone number.\\r\\n    /// @param _number The phone number to check.\\r\\n    /// @return True if the hacker is registered, false otherwise.\\r\\n    function isHackerRegistered(uint256 _number) external view returns (bool) {\\r\\n        bytes32 numberHash = _hashNumber(_number);\\r\\n        return bytes(hackersByPhone[numberHash].name).length != 0; \\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a hacker's profile is initialized.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @return True if the hacker's profile is initialized, false otherwise.\\r\\n    function isHackerInitialized(address _hackerAddress) external view returns (bool) {\\r\\n        return hackersByAddress[_hackerAddress].initialized;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Private helper function to check if an email is already registered.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @param _email The email to check.\\r\\n    /// @return True if the email is registered, false otherwise.\\r\\n    function _isEmailRegistered(address _hackerAddress, string memory _email) private view returns (bool) {\\r\\n        bytes32 hashedEmail = _hashEmail(_email);\\r\\n        return hackerEmailHashes[hashedEmail] == _hackerAddress;\\r\\n    }\\r\\n    function _hashEmail(string memory _email) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(_email, salt));\\r\\n    }\\r\\n\\r\\n    function _hashNumber(uint256 _number) private view returns (bytes32) {\\r\\n        return keccak256(abi.encode(_number, salt));\\r\\n    }\\r\\n\\r\\n    \\r\\n}\\r\\n\",\"keccak256\":\"0x08ad7e7a83b470a8289e4ad538be76482cac7805bf11f6c84f36f7caeea57a68\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040526006805460ff191690553480156200001c57600080fd5b50604051620020e0380380620020e08339810160408190526200003f9162000243565b604080518082018252601281527122aa24293bb0b73230a430b1b5b0ba3437b760711b602080830191909152825180840190935260018352603160f81b90830152903380620000a957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b620000b48162000177565b5060018055620000c6826002620001c7565b61012052620000d7816003620001c7565b61014052815160208084019190912060e052815190820120610100524660a0526200016560e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c05260055562000443565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602083511015620001e757620001df8362000200565b9050620001fa565b81620001f4848262000302565b5060ff90505b92915050565b600080829050601f815111156200022e578260405163305a27a960e01b8152600401620000a09190620003ce565b80516200023b826200041e565b179392505050565b6000602082840312156200025657600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200028857607f821691505b602082108103620002a957634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002fd57600081815260208120601f850160051c81016020861015620002d85750805b601f850160051c820191505b81811015620002f957828155600101620002e4565b5050505b505050565b81516001600160401b038111156200031e576200031e6200025d565b62000336816200032f845462000273565b84620002af565b602080601f8311600181146200036e5760008415620003555750858301515b600019600386901b1c1916600185901b178555620002f9565b600085815260208120601f198616915b828110156200039f578886015182559484019460019091019084016200037e565b5085821015620003be5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208083528351808285015260005b81811015620003fd57858101830151858201604001528201620003df565b506000604082860101526040601f19601f8301168501019250505092915050565b80516020808301519190811015620002a95760001960209190910360031b1b16919050565b60805160a05160c05160e051610100516101205161014051611c426200049e6000396000611199015260006111670152600061129901526000611271015260006111cc015260006111f6015260006112200152611c426000f3fe6080604052600436106101225760003560e01c80636826a830116100a0578063bb29ccc611610064578063bb29ccc614610353578063cb419eec14610373578063d3229343146103b6578063d77832ca146103cb578063f2fde38b146103eb57600080fd5b80636826a830146102a957806369254d40146102d6578063715018a6146102ee57806384b0196e146103035780638da5cb5b1461032b57600080fd5b80631fa4dc52116100e75780631fa4dc52146101eb5780633de2c4831461020557806351c732b01461024957806359709c4514610269578063611ef44f1461028957600080fd5b8062a170c91461012e578063031a66b61461015057806309fdf02e1461017b578063104bec291461019b5780631e9f45a5146101cb57600080fd5b3661012957005b600080fd5b34801561013a57600080fd5b5061014e61014936600461160b565b61040b565b005b34801561015c57600080fd5b5061016561045a565b60405161017291906116db565b60405180910390f35b34801561018757600080fd5b5061014e6101963660046117e9565b6105a0565b3480156101a757600080fd5b506101bb6101b6366004611856565b61073a565b6040519015158152602001610172565b3480156101d757600080fd5b5061014e6101e636600461186f565b610770565b3480156101f757600080fd5b506006546101bb9060ff1681565b34801561021157600080fd5b5061023b6102203660046118dc565b6001600160a01b031660009081526007602052604090205490565b604051908152602001610172565b34801561025557600080fd5b5061014e6102643660046118f7565b610934565b34801561027557600080fd5b5061023b6102843660046118dc565b610c90565b34801561029557600080fd5b5061014e6102a4366004611856565b610cc7565b3480156102b557600080fd5b506102c96102c4366004611986565b610cd4565b60405161017291906119bb565b3480156102e257600080fd5b5060065460ff166101bb565b3480156102fa57600080fd5b5061014e610df9565b34801561030f57600080fd5b50610318610e0d565b60405161017297969594939291906119ce565b34801561033757600080fd5b506000546040516001600160a01b039091168152602001610172565b34801561035f57600080fd5b506102c961036e3660046118dc565b610e53565b34801561037f57600080fd5b506101bb61038e3660046118dc565b6001600160a01b0316600090815260096020526040902060040154600160a01b900460ff1690565b3480156103c257600080fd5b5061023b600681565b3480156103d757600080fd5b506102c96103e6366004611856565b610f60565b3480156103f757600080fd5b5061014e6104063660046118dc565b610fc2565b610413611005565b6006805460ff19168215159081179091556040519081527f1a30f630d0950ddfc90d43ec4e405fd012ddb4ba669dd2bd5e95439631c4221f9060200160405180910390a150565b6060600c805480602002602001604051908101604052809291908181526020016000905b828210156105975760008481526020908190206040805160c081019091526005850290910180546001600160a01b0316825260018101805492939192918401916104c790611a64565b80601f01602080910402602001604051908101604052809291908181526020018280546104f390611a64565b80156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b50505091835250506002820154602080830191909152600383015460408301526004909201546001600160a01b0381166060830152600160a01b900460ff161515608090910152908252600192909201910161047e565b50505050905090565b3360009081526009602052604090206004810154600160a01b900460ff166105db57604051630a0e3b7560e21b815260040160405180910390fd5b60006105e683611032565b6000818152600b60205260409020549091506001600160a01b03161580159061062657506000818152600b60205260409020546001600160a01b03163314155b1561064457604051630b78cb0160e31b815260040160405180910390fd5b600061064f8561106f565b9050600061065d3387611086565b905080801561068357506000828152600a60205260409020546001600160a01b03163314155b156106a15760405163652725eb60e11b815260040160405180910390fd5b828460030154146106d2576000838152600b6020526040902080546001600160a01b03191633179055600384018390555b600184016106e08882611aed565b50600284018290556000828152600a602052604080822080546001600160a01b03191633908117909155905190917f899e426a1145f5a7442566cb6f469b4a55da6844560a30d29ef1ed98e4387cac91a250505050505050565b60008061074683611032565b600081815260086020526040902060010180549192509061076690611a64565b1515949350505050565b3360009081526009602052604090206004810154600160a01b900460ff16156107ab5760405162dc149f60e41b815260040160405180910390fd5b33600090815260076020526040902054156107d957604051633ab3447f60e11b815260040160405180910390fd5b600454604080517f8436e0b04c93157f90a55acb9c14dc3f4dfb2f28f2f94c63c091f411286818a1602082015233918101919091526060810191909152600090608001604051602081830303815290604052805190602001209050600061083f826110b9565b9050600061084d82866110e6565b90506001600160a01b0381163314610878576040516302e257b760e61b815260040160405180910390fd5b6004805433600090815260076020526040812082905590919061089a83611bad565b909155505083546001600160a01b031990811633908117865560048601805460ff60a01b1916600160a01b179055600286015460038701546000828152600a602090815260408083208054881687179055838352600b90915280822080549096168517909555935191939092917f03a11e363798d177d3b70e778154773018cf4669a4ecf1fdbacd173248bb464e9190a250505050505050565b60065460ff1661095757604051632596f79960e01b815260040160405180910390fd5b6001600160a01b03858116600090815260096020526040902054161561099057604051634f2532fb60e11b815260040160405180910390fd5b600061099b83611032565b905060006109a88561106f565b6000838152600b60205260409020549091506001600160a01b0316156109e157604051630b78cb0160e31b815260040160405180910390fd5b6109eb8786611086565b806109fb57506109fb3386611086565b15610a195760405163652725eb60e11b815260040160405180910390fd5b6040805160c0810182523381526020808201898152828401859052606083018690526001600160a01b038781166080850152600060a08501819052878152600890935293909120825181546001600160a01b031916941693909317835551909182916001820190610a8a9082611aed565b5060408281015160028301556060830151600383015560808301516004909201805460a0909401511515600160a01b026001600160a81b03199094166001600160a01b039384161793909317909255336000908152600960209081529290208351815492166001600160a01b031992909216919091178155908201518291906001820190610b189082611aed565b50604082015160028201556060820151600382015560808201516004909101805460a0909301511515600160a01b026001600160a81b03199093166001600160a01b039283161792909217909155600c8054600181018255600091909152825160059091027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781018054929093166001600160a01b03199290921691909117825560208301518392917fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c80190610bee9082611aed565b5060408281015160028301556060830151600383015560808301516004909201805460a0909401511515600160a01b026001600160a81b03199094166001600160a01b03909316929092179290921790555133907f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c90610c7e9087906001600160a01b0391909116815260200190565b60405180910390a25050505050505050565b600080546001600160a01b03838116911614610cbf57604051631a27eac360e11b815260040160405180910390fd5b505060055490565b610ccf611005565b600555565b610cdc6115d5565b6000610ce78361106f565b6000818152600a60209081526040808320546001600160a01b0390811684526009835292819020815160c0810190925280549093168152600183018054949550909391840191610d3690611a64565b80601f0160208091040260200160405190810160405280929190818152602001828054610d6290611a64565b8015610daf5780601f10610d8457610100808354040283529160200191610daf565b820191906000526020600020905b815481529060010190602001808311610d9257829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b0381166060830152600160a01b900460ff1615156080909101529392505050565b610e01611005565b610e0b6000611110565b565b600060608060008060006060610e21611160565b610e29611192565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b610e5b6115d5565b6001600160a01b03808316600090815260096020908152604091829020825160c081019093528054909316825260018301805492939291840191610e9e90611a64565b80601f0160208091040260200160405190810160405280929190818152602001828054610eca90611a64565b8015610f175780601f10610eec57610100808354040283529160200191610f17565b820191906000526020600020905b815481529060010190602001808311610efa57829003601f168201915b505050918352505060028201546020820152600382015460408201526004909101546001600160a01b0381166060830152600160a01b900460ff16151560809091015292915050565b610f686115d5565b6000610f7383611032565b6000818152600b60209081526040808320546001600160a01b0390811684526009835292819020815160c0810190925280549093168152600183018054949550909391840191610d3690611a64565b610fca611005565b6001600160a01b038116610ff957604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b61100281611110565b50565b6000546001600160a01b03163314610e0b5760405163118cdaa760e01b8152336004820152602401610ff0565b600081600554604051602001611052929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b600081600554604051602001611052929190611bd4565b6000806110928361106f565b6000908152600a60205260409020546001600160a01b038581169116149150505b92915050565b60006110b36110c66111bf565b8360405161190160f01b8152600281019290925260228201526042902090565b6000806000806110f686866112ea565b9250925092506111068282611337565b5090949350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b606061118d7f000000000000000000000000000000000000000000000000000000000000000060026113f4565b905090565b606061118d7f000000000000000000000000000000000000000000000000000000000000000060036113f4565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561121857507f000000000000000000000000000000000000000000000000000000000000000046145b1561124257507f000000000000000000000000000000000000000000000000000000000000000090565b61118d604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b600080600083516041036113245760208401516040850151606086015160001a6113168882858561149f565b955095509550505050611330565b50508151600091506002905b9250925092565b600082600381111561134b5761134b611bf6565b03611354575050565b600182600381111561136857611368611bf6565b036113865760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561139a5761139a611bf6565b036113bb5760405163fce698f760e01b815260048101829052602401610ff0565b60038260038111156113cf576113cf611bf6565b036113f0576040516335e2f38360e21b815260048101829052602401610ff0565b5050565b606060ff831461140e576114078361156e565b90506110b3565b81805461141a90611a64565b80601f016020809104026020016040519081016040528092919081815260200182805461144690611a64565b80156114935780601f1061146857610100808354040283529160200191611493565b820191906000526020600020905b81548152906001019060200180831161147657829003601f168201915b505050505090506110b3565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411156114da5750600091506003905082611564565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561152e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661155a57506000925060019150829050611564565b9250600091508190505b9450945094915050565b6060600061157b836115ad565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156110b357604051632cd44ac360e21b815260040160405180910390fd5b6040805160c08101825260008082526060602083018190529282018190529181018290526080810182905260a081019190915290565b60006020828403121561161d57600080fd5b8135801515811461162d57600080fd5b9392505050565b6000815180845260005b8181101561165a5760208185018101518683018201520161163e565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b03808351168452602083015160c060208601526116a260c0860182611634565b9050604084015160408601526060840151606086015281608085015116608086015260a0840151151560a0860152809250505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561173057603f1988860301845261171e85835161167a565b94509285019290850190600101611702565b5092979650505050505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561176e5761176e61173d565b604051601f8501601f19908116603f011681019082821181831017156117965761179661173d565b816040528093508581528686860111156117af57600080fd5b858560208301376000602087830101525050509392505050565b600082601f8301126117da57600080fd5b61162d83833560208501611753565b6000806000606084860312156117fe57600080fd5b833567ffffffffffffffff8082111561181657600080fd5b611822878388016117c9565b9450602086013591508082111561183857600080fd5b50611845868287016117c9565b925050604084013590509250925092565b60006020828403121561186857600080fd5b5035919050565b60006020828403121561188157600080fd5b813567ffffffffffffffff81111561189857600080fd5b8201601f810184136118a957600080fd5b6118b884823560208401611753565b949350505050565b80356001600160a01b03811681146118d757600080fd5b919050565b6000602082840312156118ee57600080fd5b61162d826118c0565b600080600080600060a0868803121561190f57600080fd5b611918866118c0565b9450602086013567ffffffffffffffff8082111561193557600080fd5b61194189838a016117c9565b9550604088013591508082111561195757600080fd5b50611964888289016117c9565b9350506060860135915061197a608087016118c0565b90509295509295909350565b60006020828403121561199857600080fd5b813567ffffffffffffffff8111156119af57600080fd5b6118b8848285016117c9565b60208152600061162d602083018461167a565b60ff60f81b881681526000602060e0818401526119ee60e084018a611634565b8381036040850152611a00818a611634565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825283870192509083019060005b81811015611a5257835183529284019291840191600101611a36565b50909c9b505050505050505050505050565b600181811c90821680611a7857607f821691505b602082108103611a9857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115611ae857600081815260208120601f850160051c81016020861015611ac55750805b601f850160051c820191505b81811015611ae457828155600101611ad1565b5050505b505050565b815167ffffffffffffffff811115611b0757611b0761173d565b611b1b81611b158454611a64565b84611a9e565b602080601f831160018114611b505760008415611b385750858301515b600019600386901b1c1916600185901b178555611ae4565b600085815260208120601f198616915b82811015611b7f57888601518255948401946001909101908401611b60565b5085821015611b9d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060018201611bcd57634e487b7160e01b600052601160045260246000fd5b5060010190565b604081526000611be76040830185611634565b90508260208301529392505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212205722b449702b47dc3e5886f21d87e0795b2922b5f49b9f331fb434c9600dd22464736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "ECDSAInvalidSignature()": [
        {
          "details": "The signature derives the `address(0)`."
        }
      ],
      "ECDSAInvalidSignatureLength(uint256)": [
        {
          "details": "The signature has an invalid length."
        }
      ],
      "ECDSAInvalidSignatureS(bytes32)": [
        {
          "details": "The signature has an S value that is in the upper half order."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "EIP712DomainChanged()": {
        "details": "MAY be emitted to signal that the domain could have changed."
      }
    },
    "kind": "dev",
    "methods": {
      "editHackerData(string,string,uint256)": {
        "params": {
          "_email": "The new email of the hacker.",
          "_name": "The new name of the hacker.",
          "_number": "The new phone number of the hacker."
        }
      },
      "eip712Domain()": {
        "details": "See {IERC-5267}."
      },
      "getAllHackers()": {
        "returns": {
          "_0": "An array of HackerData containing all registered hackers."
        }
      },
      "getAreRegistrationsOpen()": {
        "returns": {
          "_0": "True if registrations are open, false otherwise."
        }
      },
      "getHackerDataByAddress(address)": {
        "params": {
          "userAddress": "The address of the hacker."
        },
        "returns": {
          "user": "The HackerData associated with the address."
        }
      },
      "getHackerNonce(address)": {
        "params": {
          "_hackerAddress": "The address of the hacker."
        },
        "returns": {
          "_0": "The nonce associated with the hacker."
        }
      },
      "initializeHackerProfile(bytes)": {
        "details": "Can only be called once by each hacker.",
        "params": {
          "_signature": "The signature of the message.    c"
        }
      },
      "isHackerInitialized(address)": {
        "params": {
          "_hackerAddress": "The address of the hacker."
        },
        "returns": {
          "_0": "True if the hacker's profile is initialized, false otherwise."
        }
      },
      "isHackerRegistered(uint256)": {
        "params": {
          "_number": "The phone number to check."
        },
        "returns": {
          "_0": "True if the hacker is registered, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerHacker(address,string,string,uint256,address)": {
        "params": {
          "_email": "The email of the hacker.",
          "_lockAddress": "The class address associated with the hacker.",
          "_name": "The name of the hacker.",
          "_number": "The phone number of the hacker."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setRegistrationsStatus(bool)": {
        "details": "Only callable by the contract owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ETHRwanda Hackathon Registry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "HackerDataEdited(address)": {
        "notice": "Event emitted when a hacker's data is edited"
      },
      "HackerInitialized(address)": {
        "notice": "Event emitted when a hacker's profile is initialized"
      },
      "HackerRegistered(address,address)": {
        "notice": "Event emitted when a new hacker is registered"
      },
      "RegistrationStatusChanged(bool)": {
        "notice": "Event emitted when registration status is changed"
      }
    },
    "kind": "user",
    "methods": {
      "editHackerData(string,string,uint256)": {
        "notice": "Edits existing hacker data."
      },
      "getAllHackers()": {
        "notice": "Retrieves all registered hackers."
      },
      "getAreRegistrationsOpen()": {
        "notice": "Checks if registrations are open."
      },
      "getHackerDataByAddress(address)": {
        "notice": "Retrieves hacker data by address."
      },
      "getHackerNonce(address)": {
        "notice": "Retrieves the nonce for a specific hacker."
      },
      "initializeHackerProfile(bytes)": {
        "notice": "Initializes a hacker's profile using EIP-712 typed data."
      },
      "isHackerInitialized(address)": {
        "notice": "Checks if a hacker's profile is initialized."
      },
      "isHackerRegistered(uint256)": {
        "notice": "Checks if a hacker is registered by phone number."
      },
      "registerHacker(address,string,string,uint256,address)": {
        "notice": "Registers a new hacker."
      },
      "setRegistrationsStatus(bool)": {
        "notice": "Opens or closes registrations."
      }
    },
    "notice": "Manages the registration and data of hackers participating in the ETH Rwanda Hackathon.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 213,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1238,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_nameFallback",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1240,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "_versionFallback",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2716,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "nonce",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2718,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "salt",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 2721,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "areRegistrationsOpen",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2734,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackerNonceByAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2739,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackersByPhone",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(HackerData)2704_storage)"
      },
      {
        "astId": 2744,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackersByAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_struct(HackerData)2704_storage)"
      },
      {
        "astId": 2748,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackerEmailHashes",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2752,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "hackerNumberHashes",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2756,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "users",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(HackerData)2704_storage)dyn_storage"
      },
      {
        "astId": 2759,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
        "label": "locks",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(HackerData)2704_storage)dyn_storage": {
        "base": "t_struct(HackerData)2704_storage",
        "encoding": "dynamic_array",
        "label": "struct HackerData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(HackerData)2704_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)2704_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(HackerData)2704_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)2704_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HackerData)2704_storage": {
        "encoding": "inplace",
        "label": "struct HackerData",
        "members": [
          {
            "astId": 2693,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "hackerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2695,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2697,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2699,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "number",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          },
          {
            "astId": 2701,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "class",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2703,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonOnboard",
            "label": "initialized",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/HackerOnboard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\n/// @title ETHRwanda Hackathon Genesis Registry\r\n/// @notice This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.\r\n/// @author Danny Thomx\r\ncontract ETHRwandaHackathonGenesisRegistry is Ownable {\r\n    /// @notice Structure to store hacker data.\r\n    struct HackerData {\r\n        address hackerAddress;\r\n        string name;\r\n        string email;\r\n        uint256 number;\r\n        address class;\r\n    }\r\n\r\n    uint256 public constant VERSION = 0;\r\n\r\n    constructor() Ownable(msg.sender) {\r\n\r\n    }\r\n\r\n    mapping(uint256 => HackerData) private hackersByPhone;\r\n    mapping(address => HackerData) private hackersByAddress;\r\n    HackerData[] private users; // List to store all users\r\n\r\n    /// @notice Event emitted when a new hacker is registered\r\n    event HackerRegistered(address indexed hackerAddress, string name, string email, uint256 number, address class);\r\n\r\n    /// @notice Event emitted when a hacker's data is edited\r\n    event HackerDataEdited(address indexed hackerAddress, string name, string email, uint256 number, address class);\r\n\r\n    /// @notice Fallback function to receive Ether.\r\n    receive() external payable {}\r\n\r\n    /// @notice Withdraws all Ether from the contract to the owner's address.\r\n    /// @dev Only callable by the contract owner.\r\n    function withdraw() external onlyOwner {\r\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    /// @notice Registers a new hacker.\r\n    /// @param _hackerAddress The address of the hacker.\r\n    /// @param _name The name of the hacker.\r\n    /// @param _email The email of the hacker.\r\n    /// @param _number The phone number of the hacker.\r\n    /// @param _lockAddress The class address associated with the hacker.\r\n    function registerHacker(\r\n        address _hackerAddress,\r\n        string memory _name,\r\n        string memory _email,\r\n        uint256 _number,\r\n        address _lockAddress\r\n    ) public {\r\n        require(bytes(hackersByPhone[_number].name).length == 0, \"User already registered with this phone number\");\r\n        require(bytes(hackersByPhone[_number].email).length == 0, \"User already registered with this email\");\r\n\r\n        HackerData memory newUser = HackerData({\r\n            hackerAddress: _hackerAddress,\r\n            name: _name,\r\n            email: _email,\r\n            number: _number,\r\n            class: _lockAddress\r\n        });\r\n\r\n        hackersByPhone[_number] = newUser;\r\n        hackersByAddress[_hackerAddress] = newUser;\r\n        users.push(newUser); // Add user to the list\r\n\r\n        emit HackerRegistered(_hackerAddress, _name, _email, _number, _lockAddress);\r\n    }\r\n\r\n    /// @notice Retrieves all registered hackers.\r\n    /// @return An array of HackerData containing all registered hackers.\r\n    function getAllHackers() public onlyOwner view returns (HackerData[] memory) {\r\n        return users;\r\n    }\r\n\r\n    /// @notice Retrieves hacker data by phone number.\r\n    /// @param _phone The phone number of the hacker.\r\n    /// @return user The HackerData associated with the phone number.\r\n    function getHackerDataByPhone(uint256 _phone) public view returns (HackerData memory user) {\r\n        return hackersByPhone[_phone];\r\n    }\r\n\r\n    /// @notice Retrieves hacker data by address.\r\n    /// @param userAddress The address of the hacker.\r\n    /// @return user The HackerData associated with the address.\r\n    function getHackerDataByAddress(address userAddress) public view returns (HackerData memory user) {\r\n        return hackersByAddress[userAddress];\r\n    }\r\n\r\n    /// @notice Edits existing hacker data.\r\n    /// @param _hackerAddress The address of the hacker.\r\n    /// @param _name The new name of the hacker.\r\n    /// @param _email The new email of the hacker.\r\n    /// @param _number The new phone number of the hacker.\r\n    /// @param _lockAddress The new class address associated with the hacker.\r\n    function editHackerData(\r\n        address _hackerAddress,\r\n        string memory _name,\r\n        string memory _email,\r\n        uint256 _number,\r\n        address _lockAddress\r\n    ) public {\r\n        require(hackersByAddress[_hackerAddress].hackerAddress != address(0), \"User not found\");\r\n\r\n        HackerData storage hackerData = hackersByAddress[_hackerAddress];\r\n\r\n        // Update user data\r\n        hackerData.name = _name;\r\n        hackerData.email = _email;\r\n        hackerData.number = _number;\r\n        hackerData.class = _lockAddress;\r\n\r\n        // Update phone mapping if the number has changed\r\n        if (hackerData.number != _number) {\r\n            delete hackersByPhone[hackerData.number];\r\n            hackersByPhone[_number] = hackerData;\r\n        }\r\n\r\n        emit HackerDataEdited(_hackerAddress, _name, _email, _number, _lockAddress);\r\n    }\r\n\r\n    /// @notice Checks if a hacker is registered by phone number.\r\n    /// @param _number The phone number to check.\r\n    /// @return True if the hacker is registered, false otherwise.\r\n    function isHackerRegistered(uint256 _number) public view returns (bool) {\r\n        return bytes(hackersByPhone[_number].email).length > 0;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/HackerOnboard.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/// @title ETHRwanda Hackathon Genesis Registry\r\n/// @notice This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.\r\n/// @author Danny Thomx\r\ncontract ETHRwandaHackathonGenesisRegistry is Ownable {\r\n    // Custom error definitions\r\n    error UserNotRegistered();\r\n    error RegistrationsClosed();\r\n    error UserAlreadyRegisteredWithPhone();\r\n    error UserAlreadyRegisteredWithEmail();\r\n    error InsufficientBalance();\r\n    error TransferFailed();\r\n\r\n    /// @notice Structure to store hacker data.\r\n    struct HackerData {\r\n        address hackerAddress;\r\n        string name;\r\n        string email;\r\n        uint256 number;\r\n        address class;\r\n    }\r\n\r\n    uint256 public constant VERSION = 0;\r\n    bool public areRegistrationsOpen = false; // State variable to track registration status\r\n\r\n    constructor() Ownable(msg.sender) {}\r\n\r\n    mapping(uint256 => HackerData) private hackersByPhone;\r\n    mapping(address => HackerData) private hackersByAddress;\r\n    HackerData[] private users; // List to store all users\r\n\r\n    /// @notice Event emitted when a new hacker is registered\r\n    event HackerRegistered(address indexed hackerAddress, address class);\r\n\r\n    /// @notice Event emitted when a hacker's data is edited\r\n    event HackerDataEdited(address indexed hackerAddress);\r\n\r\n    /// @notice Event emitted when registration status is changed\r\n    event RegistrationStatusChanged(bool isOpen);\r\n\r\n    event RwETHTransfer(address indexed from, address indexed to, uint256 amount);\r\n    event RwTokenTransfer(address indexed from, address indexed to, address token, uint256 amount);\r\n    event RwCollectibleTransfer(address indexed from, address indexed to, address token, uint256 tokenId);\r\n\r\n    /// @notice Fallback function to receive Ether.\r\n    receive() external payable {}\r\n\r\n    /// @notice Withdraws all Ether from the contract to the owner's address.\r\n    /// @dev Only callable by the contract owner.\r\n    function withdraw() external onlyOwner {\r\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    /// @notice Opens registrations.\r\n    /// @dev Only callable by the contract owner.\r\n    function setRegistrationsStatus(bool _areRegistrationsOpen) external onlyOwner {\r\n        areRegistrationsOpen = _areRegistrationsOpen;\r\n        emit RegistrationStatusChanged(_areRegistrationsOpen);\r\n    }\r\n\r\n    /// @notice Checks if registrations are open.\r\n    /// @return True if registrations are open, false otherwise.\r\n    function getAreRegistrationsOpen() public view returns (bool) {\r\n        return areRegistrationsOpen;\r\n    }\r\n\r\n    modifier onlyRegistered() {\r\n        if (hackersByAddress[msg.sender].hackerAddress == address(0)) revert UserNotRegistered();\r\n        _;\r\n    }\r\n\r\n    /// @notice Registers a new hacker.\r\n    /// @param _hackerAddress The address of the hacker.\r\n    /// @param _name The name of the hacker.\r\n    /// @param _email The email of the hacker.\r\n    /// @param _number The phone number of the hacker.\r\n    /// @param _lockAddress The class address associated with the hacker.\r\n    function registerHacker(\r\n        address _hackerAddress,\r\n        string memory _name,\r\n        string memory _email,\r\n        uint256 _number,\r\n        address _lockAddress\r\n    ) public {\r\n        if (!areRegistrationsOpen) revert RegistrationsClosed();\r\n        if (bytes(hackersByPhone[_number].name).length != 0) revert UserAlreadyRegisteredWithPhone();\r\n        if (bytes(hackersByPhone[_number].email).length != 0) revert UserAlreadyRegisteredWithEmail();\r\n\r\n        HackerData memory newUser = HackerData({\r\n            hackerAddress: _hackerAddress,\r\n            name: _name,\r\n            email: _email,\r\n            number: _number,\r\n            class: _lockAddress\r\n        });\r\n\r\n        hackersByPhone[_number] = newUser;\r\n        hackersByAddress[_hackerAddress] = newUser;\r\n        users.push(newUser);\r\n\r\n        emit HackerRegistered(_hackerAddress, _lockAddress);\r\n    }\r\n\r\n    /// @notice Retrieves all registered hackers.\r\n    /// @return An array of HackerData containing all registered hackers.\r\n    function getAllHackers() public onlyOwner view returns (HackerData[] memory) {\r\n        return users;\r\n    }\r\n\r\n    /// @notice Retrieves hacker data by phone number.\r\n    /// @param _phone The phone number of the hacker.\r\n    /// @return user The HackerData associated with the phone number.\r\n    function getHackerDataByPhone(uint256 _phone) public view returns (HackerData memory user) {\r\n        return hackersByPhone[_phone];\r\n    }\r\n\r\n    /// @notice Retrieves hacker data by address.\r\n    /// @param userAddress The address of the hacker.\r\n    /// @return user The HackerData associated with the address.\r\n    function getHackerDataByAddress(address userAddress) public view returns (HackerData memory user) {\r\n        return hackersByAddress[userAddress];\r\n    }\r\n\r\n    /// @notice Edits existing hacker data.\r\n    /// @param _hackerAddress The address of the hacker.\r\n    /// @param _name The new name of the hacker.\r\n    /// @param _email The new email of the hacker.\r\n    /// @param _number The new phone number of the hacker.\r\n    /// @param _lockAddress The new class address associated with the hacker.\r\n    function editHackerData(\r\n        address _hackerAddress,\r\n        string memory _name,\r\n        string memory _email,\r\n        uint256 _number,\r\n        address _lockAddress\r\n    ) public {\r\n        require(hackersByAddress[_hackerAddress].hackerAddress != address(0), \"User not found\");\r\n\r\n        HackerData storage hackerData = hackersByAddress[_hackerAddress];\r\n\r\n        // Update user data\r\n        hackerData.name = _name;\r\n        hackerData.email = _email;\r\n        hackerData.number = _number;\r\n        hackerData.class = _lockAddress;\r\n\r\n        // Update phone mapping if the number has changed\r\n        if (hackerData.number != _number) {\r\n            delete hackersByPhone[hackerData.number];\r\n            hackersByPhone[_number] = hackerData;\r\n        }\r\n\r\n        emit HackerDataEdited(_hackerAddress);\r\n    }\r\n\r\n    /// @notice Checks if a hacker is registered by phone number.\r\n    /// @param _number The phone number to check.\r\n    /// @return True if the hacker is registered, false otherwise.\r\n    function isHackerRegistered(uint256 _number) public view returns (bool) {\r\n        return bytes(hackersByPhone[_number].email).length > 0;\r\n    }\r\n\r\n    /// @notice Batch registers hackers.\r\n    /// @param _hackers An array of HackerData structs to register.\r\n    function batchRegisterHackers(HackerData[] memory _hackers) external onlyOwner {\r\n        require(areRegistrationsOpen, \"Registrations are closed\");\r\n        for (uint256 i = 0; i < _hackers.length; i++) {\r\n            registerHacker(\r\n                _hackers[i].hackerAddress,\r\n                _hackers[i].name,\r\n                _hackers[i].email,\r\n                _hackers[i].number,\r\n                _hackers[i].class\r\n            );\r\n            emit HackerRegistered(_hackers[i].hackerAddress, _hackers[i].class);\r\n        }\r\n    }\r\n\r\n    /// @notice Sends Ether to a specified address.\r\n    /// @param _to The address to send Ether to.\r\n    /// @param _amount The amount of Ether to send.\r\n    function sendEther(address payable _to, uint256 _amount) external onlyRegistered {\r\n        if (address(this).balance < _amount) revert InsufficientBalance();\r\n        (bool success, ) = _to.call{value: _amount}(\"\");\r\n        if (!success) revert TransferFailed();\r\n        emit RwETHTransfer(msg.sender, _to, _amount);\r\n    }\r\n\r\n    /// @notice Transfers ERC20 tokens to a specified address.\r\n    /// @param _token The ERC20 token contract.\r\n    /// @param _to The address to transfer tokens to.\r\n    /// @param _amount The amount of tokens to transfer.\r\n    function transferERC20(IERC20 _token, address _to, uint256 _amount) external onlyRegistered {\r\n        if (!_token.transferFrom(msg.sender, _to, _amount)) revert TransferFailed();\r\n        emit RwTokenTransfer(msg.sender, _to, address(_token), _amount);\r\n    }\r\n\r\n    /// @notice Transfers ERC721 tokens to a specified address.\r\n    /// @param _token The ERC721 token contract.\r\n    /// @param _to The address to transfer tokens to.\r\n    /// @param _tokenId The ID of the token to transfer.\r\n    function transferERC721(IERC721 _token, address _to, uint256 _tokenId) external onlyRegistered {\r\n        _token.safeTransferFrom(msg.sender, _to, _tokenId);\r\n        emit RwCollectibleTransfer(msg.sender, _to, address(_token), _tokenId);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
{
  "address": "0x3882d10921fdb2B46FEEa5e745f6dc0819E34399",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "class",
          "type": "address"
        }
      ],
      "name": "HackerDataEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "class",
          "type": "address"
        }
      ],
      "name": "HackerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockAddress",
          "type": "address"
        }
      ],
      "name": "editHackerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHackers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getHackerDataByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData",
          "name": "user",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_phone",
          "type": "uint256"
        }
      ],
      "name": "getHackerDataByPhone",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData",
          "name": "user",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "isHackerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockAddress",
          "type": "address"
        }
      ],
      "name": "registerHacker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x79d396425208b095c0d016429dce1a131ab4f690d876eaa7733118fe9d3071eb",
  "receipt": {
    "to": null,
    "from": "0x87B010d21D0ee095Fe6916241C56dB98a4cc52cA",
    "contractAddress": "0x3882d10921fdb2B46FEEa5e745f6dc0819E34399",
    "transactionIndex": 1,
    "gasUsed": "1019056",
    "logsBloom": "0x
    "blockHash": "0xc9d1ea4678160f7547c047929365f22505f8ea6a9ecbb2a40f741dbd0368739a",
    "transactionHash": "0x79d396425208b095c0d016429dce1a131ab4f690d876eaa7733118fe9d3071eb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 89209816,
        "transactionHash": "0x79d396425208b095c0d016429dce1a131ab4f690d876eaa7733118fe9d3071eb",
        "address": "0x3882d10921fdb2B46FEEa5e745f6dc0819E34399",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000087b010d21d0ee095fe6916241c56db98a4cc52ca"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc9d1ea4678160f7547c047929365f22505f8ea6a9ecbb2a40f741dbd0368739a"
      }
    ],
    "blockNumber": 89209816,
    "cumulativeGasUsed": "1019056",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b823ed2a78b9d04af63ef9e57946d30b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"name\":\"HackerDataEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"name\":\"HackerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"editHackerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHackers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getHackerDataByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phone\",\"type\":\"uint256\"}],\"name\":\"getHackerDataByPhone\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"isHackerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"registerHacker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Danny Thomx\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"editHackerData(address,string,string,uint256,address)\":{\"params\":{\"_email\":\"The new email of the hacker.\",\"_hackerAddress\":\"The address of the hacker.\",\"_lockAddress\":\"The new class address associated with the hacker.\",\"_name\":\"The new name of the hacker.\",\"_number\":\"The new phone number of the hacker.\"}},\"getAllHackers()\":{\"returns\":{\"_0\":\"An array of HackerData containing all registered hackers.\"}},\"getHackerDataByAddress(address)\":{\"params\":{\"userAddress\":\"The address of the hacker.\"},\"returns\":{\"user\":\"The HackerData associated with the address.\"}},\"getHackerDataByPhone(uint256)\":{\"params\":{\"_phone\":\"The phone number of the hacker.\"},\"returns\":{\"user\":\"The HackerData associated with the phone number.\"}},\"isHackerRegistered(uint256)\":{\"params\":{\"_number\":\"The phone number to check.\"},\"returns\":{\"_0\":\"True if the hacker is registered, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerHacker(address,string,string,uint256,address)\":{\"params\":{\"_email\":\"The email of the hacker.\",\"_hackerAddress\":\"The address of the hacker.\",\"_lockAddress\":\"The class address associated with the hacker.\",\"_name\":\"The name of the hacker.\",\"_number\":\"The phone number of the hacker.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Only callable by the contract owner.\"}},\"title\":\"ETHRwanda Hackathon Genesis Registry\",\"version\":1},\"userdoc\":{\"events\":{\"HackerDataEdited(address,string,string,uint256,address)\":{\"notice\":\"Event emitted when a hacker's data is edited\"},\"HackerRegistered(address,string,string,uint256,address)\":{\"notice\":\"Event emitted when a new hacker is registered\"}},\"kind\":\"user\",\"methods\":{\"editHackerData(address,string,string,uint256,address)\":{\"notice\":\"Edits existing hacker data.\"},\"getAllHackers()\":{\"notice\":\"Retrieves all registered hackers.\"},\"getHackerDataByAddress(address)\":{\"notice\":\"Retrieves hacker data by address.\"},\"getHackerDataByPhone(uint256)\":{\"notice\":\"Retrieves hacker data by phone number.\"},\"isHackerRegistered(uint256)\":{\"notice\":\"Checks if a hacker is registered by phone number.\"},\"registerHacker(address,string,string,uint256,address)\":{\"notice\":\"Registers a new hacker.\"},\"withdraw()\":{\"notice\":\"Withdraws all Ether from the contract to the owner's address.\"}},\"notice\":\"This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HackerOnboard.sol\":\"ETHRwandaHackathonGenesisRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/HackerOnboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title ETHRwanda Hackathon Genesis Registry\\r\\n/// @notice This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.\\r\\n/// @author Danny Thomx\\r\\ncontract ETHRwandaHackathonGenesisRegistry is Ownable {\\r\\n    /// @notice Structure to store hacker data.\\r\\n    struct HackerData {\\r\\n        address hackerAddress;\\r\\n        string name;\\r\\n        string email;\\r\\n        uint256 number;\\r\\n        address class;\\r\\n    }\\r\\n\\r\\n    uint256 public constant VERSION = 0;\\r\\n\\r\\n    constructor() Ownable(msg.sender) {\\r\\n\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => HackerData) private hackersByPhone;\\r\\n    mapping(address => HackerData) private hackersByAddress;\\r\\n    HackerData[] private users; // List to store all users\\r\\n\\r\\n    /// @notice Event emitted when a new hacker is registered\\r\\n    event HackerRegistered(address indexed hackerAddress, string name, string email, uint256 number, address class);\\r\\n\\r\\n    /// @notice Event emitted when a hacker's data is edited\\r\\n    event HackerDataEdited(address indexed hackerAddress, string name, string email, uint256 number, address class);\\r\\n\\r\\n    /// @notice Fallback function to receive Ether.\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Withdraws all Ether from the contract to the owner's address.\\r\\n    /// @dev Only callable by the contract owner.\\r\\n    function withdraw() external onlyOwner {\\r\\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Registers a new hacker.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @param _name The name of the hacker.\\r\\n    /// @param _email The email of the hacker.\\r\\n    /// @param _number The phone number of the hacker.\\r\\n    /// @param _lockAddress The class address associated with the hacker.\\r\\n    function registerHacker(\\r\\n        address _hackerAddress,\\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number,\\r\\n        address _lockAddress\\r\\n    ) public {\\r\\n        require(bytes(hackersByPhone[_number].name).length == 0, \\\"User already registered with this phone number\\\");\\r\\n        require(bytes(hackersByPhone[_number].email).length == 0, \\\"User already registered with this email\\\");\\r\\n\\r\\n        HackerData memory newUser = HackerData({\\r\\n            hackerAddress: _hackerAddress,\\r\\n            name: _name,\\r\\n            email: _email,\\r\\n            number: _number,\\r\\n            class: _lockAddress\\r\\n        });\\r\\n\\r\\n        hackersByPhone[_number] = newUser;\\r\\n        hackersByAddress[_hackerAddress] = newUser;\\r\\n        users.push(newUser); // Add user to the list\\r\\n\\r\\n        emit HackerRegistered(_hackerAddress, _name, _email, _number, _lockAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves all registered hackers.\\r\\n    /// @return An array of HackerData containing all registered hackers.\\r\\n    function getAllHackers() public onlyOwner view returns (HackerData[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves hacker data by phone number.\\r\\n    /// @param _phone The phone number of the hacker.\\r\\n    /// @return user The HackerData associated with the phone number.\\r\\n    function getHackerDataByPhone(uint256 _phone) public view returns (HackerData memory user) {\\r\\n        return hackersByPhone[_phone];\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves hacker data by address.\\r\\n    /// @param userAddress The address of the hacker.\\r\\n    /// @return user The HackerData associated with the address.\\r\\n    function getHackerDataByAddress(address userAddress) public view returns (HackerData memory user) {\\r\\n        return hackersByAddress[userAddress];\\r\\n    }\\r\\n\\r\\n    /// @notice Edits existing hacker data.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @param _name The new name of the hacker.\\r\\n    /// @param _email The new email of the hacker.\\r\\n    /// @param _number The new phone number of the hacker.\\r\\n    /// @param _lockAddress The new class address associated with the hacker.\\r\\n    function editHackerData(\\r\\n        address _hackerAddress,\\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number,\\r\\n        address _lockAddress\\r\\n    ) public {\\r\\n        require(hackersByAddress[_hackerAddress].hackerAddress != address(0), \\\"User not found\\\");\\r\\n\\r\\n        HackerData storage hackerData = hackersByAddress[_hackerAddress];\\r\\n\\r\\n        // Update user data\\r\\n        hackerData.name = _name;\\r\\n        hackerData.email = _email;\\r\\n        hackerData.number = _number;\\r\\n        hackerData.class = _lockAddress;\\r\\n\\r\\n        // Update phone mapping if the number has changed\\r\\n        if (hackerData.number != _number) {\\r\\n            delete hackersByPhone[hackerData.number];\\r\\n            hackersByPhone[_number] = hackerData;\\r\\n        }\\r\\n\\r\\n        emit HackerDataEdited(_hackerAddress, _name, _email, _number, _lockAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a hacker is registered by phone number.\\r\\n    /// @param _number The phone number to check.\\r\\n    /// @return True if the hacker is registered, false otherwise.\\r\\n    function isHackerRegistered(uint256 _number) public view returns (bool) {\\r\\n        return bytes(hackersByPhone[_number].email).length > 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x61f2e305f36dc0fad1d33e5d13cc0d608edab8faa2d6ad84e10d0376dbd79bdc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50338061003757604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004081610046565b50610096565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b611093806100a56000396000f3fe6080604052600436106100a05760003560e01c8063715018a611610064578063715018a61461016b5780638da5cb5b14610180578063a7f66743146101a8578063bb29ccc6146101c8578063f2fde38b146101e8578063ffa1ad741461020857600080fd5b8063031a66b6146100ac578063104bec29146100d757806312dbaf97146101075780633ccfd60b1461013457806351c732b01461014b57600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100c161022b565b6040516100ce9190610c85565b60405180910390f35b3480156100e357600080fd5b506100f76100f2366004610ce7565b6103ef565b60405190151581526020016100ce565b34801561011357600080fd5b50610127610122366004610ce7565b610418565b6040516100ce9190610d00565b34801561014057600080fd5b50610149610592565b005b34801561015757600080fd5b50610149610166366004610dd9565b610637565b34801561017757600080fd5b50610149610979565b34801561018c57600080fd5b506000546040516001600160a01b0390911681526020016100ce565b3480156101b457600080fd5b506101496101c3366004610dd9565b61098d565b3480156101d457600080fd5b506101276101e3366004610e68565b610a7e565b3480156101f457600080fd5b50610149610203366004610e68565b610ac9565b34801561021457600080fd5b5061021d600081565b6040519081526020016100ce565b6060610235610b04565b6003805480602002602001604051908101604052809291908181526020016000905b828210156103e65760008481526020908190206040805160a081019091526005850290910180546001600160a01b0316825260018101805492939192918401916102a090610e83565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90610e83565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050815260200160028201805461033290610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461035e90610e83565b80156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b505050918352505060038201546020808301919091526004909201546001600160a01b03166040909101529082526001929092019101610257565b50505050905090565b6000818152600160205260408120600201805482919061040e90610e83565b9050119050919050565b610420610b81565b600082815260016020818152604092839020835160a0810190945280546001600160a01b0316845291820180549184019161045a90610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461048690610e83565b80156104d35780601f106104a8576101008083540402835291602001916104d3565b820191906000526020600020905b8154815290600101906020018083116104b657829003601f168201915b505050505081526020016002820180546104ec90610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461051890610e83565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b031660409091015292915050565b61059a610b04565b600080546040516001600160a01b039091169047908381818185875af1925050503d80600081146105e7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ec565b606091505b50509050806106345760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b50565b600082815260016020819052604090912001805461065490610e83565b1590506106ba5760405162461bcd60e51b815260206004820152602e60248201527f5573657220616c7265616479207265676973746572656420776974682074686960448201526d3990383437b73290373ab6b132b960911b606482015260840161062b565b600082815260016020526040902060020180546106d690610e83565b1590506107355760405162461bcd60e51b815260206004820152602760248201527f5573657220616c726561647920726567697374657265642077697468207468696044820152661cc8195b585a5b60ca1b606482015260840161062b565b6040805160a0810182526001600160a01b0387811682526020808301888152838501889052606084018790528583166080850152600087815260019283905294909420835181546001600160a01b0319169316929092178255925191928392908201906107a29082610f0c565b50604082015160028201906107b79082610f0c565b5060608201516003820155608090910151600490910180546001600160a01b039283166001600160a01b0319918216179091558782166000908152600260209081526040909120845181549416939092169290921781559082015182919060018201906108249082610f0c565b50604082015160028201906108399082610f0c565b506060820151600382810191909155608090920151600490910180546001600160a01b03199081166001600160a01b0393841617909155825460018101845560009390935283517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600590940293840180549092169216919091178155602083015183927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c01906108ea9082610f0c565b50604082015160028201906108ff9082610f0c565b5060608201516003820155608090910151600490910180546001600160a01b0319166001600160a01b03928316179055604051908716907f9c65fc21979c240ad31c9d5ee6e2988ea49174c6e589c43ca3d098698f0b633490610969908890889088908890610fcc565b60405180910390a2505050505050565b610981610b04565b61098b6000610b31565b565b6001600160a01b03858116600090815260026020526040902054166109e55760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b604482015260640161062b565b6001600160a01b038516600090815260026020526040902060018101610a0b8682610f0c565b5060028101610a1a8582610f0c565b50600381018390556004810180546001600160a01b0319166001600160a01b038416179055856001600160a01b03167f19321fafce3f8052abe3f9b2d1653f2607a2e7533e17f4080ad8cb0f4bda2bac868686866040516109699493929190610fcc565b610a86610b81565b6001600160a01b03808316600090815260026020908152604091829020825160a08101909352805490931682526001830180549293929184019161045a90610e83565b610ad1610b04565b6001600160a01b038116610afb57604051631e4fbdf760e01b81526000600482015260240161062b565b61063481610b31565b6000546001600160a01b0316331461098b5760405163118cdaa760e01b815233600482015260240161062b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060a0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160006001600160a01b031681525090565b80821115610bd65760008155600101610bc2565b5090565b6000815180845260005b81811015610c0057602081850181015186830182015201610be4565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b03808351168452602083015160a06020860152610c4860a0860182610bda565b905060408401518582036040870152610c618282610bda565b91505060608401516060860152816080850151166080860152809250505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cda57603f19888603018452610cc8858351610c20565b94509285019290850190600101610cac565b5092979650505050505050565b600060208284031215610cf957600080fd5b5035919050565b602081526000610d136020830184610c20565b9392505050565b80356001600160a01b0381168114610d3157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d5d57600080fd5b813567ffffffffffffffff80821115610d7857610d78610d36565b604051601f8301601f19908116603f01168101908282118183101715610da057610da0610d36565b81604052838152866020858801011115610db957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610df157600080fd5b610dfa86610d1a565b9450602086013567ffffffffffffffff80821115610e1757600080fd5b610e2389838a01610d4c565b95506040880135915080821115610e3957600080fd5b50610e4688828901610d4c565b93505060608601359150610e5c60808701610d1a565b90509295509295909350565b600060208284031215610e7a57600080fd5b610d1382610d1a565b600181811c90821680610e9757607f821691505b602082108103610eb757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610f0757600081815260208120601f850160051c81016020861015610ee45750805b601f850160051c820191505b81811015610f0357828155600101610ef0565b5050505b505050565b815167ffffffffffffffff811115610f2657610f26610d36565b610f3a81610f348454610e83565b84610ebd565b602080601f831160018114610f6f5760008415610f575750858301515b600019600386901b1c1916600185901b178555610f03565b600085815260208120601f198616915b82811015610f9e57888601518255948401946001909101908401610f7f565b5085821015610fbc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608081526000610fdf6080830187610bda565b8281036020840152610ff18187610bda565b604084019590955250506001600160a01b039190911660609091015292915050565b838110156110335782860154825560019586019590910190602001611013565b5085831015610fbc5793015460001960f8600387901b161c19169092555050600190811b0190555056fea26469706673582212204a5e880d7cc5e42e56b208ebbb0b4ea7b92bcc4f6c406b100cd6bb0e6da4538d64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c8063715018a611610064578063715018a61461016b5780638da5cb5b14610180578063a7f66743146101a8578063bb29ccc6146101c8578063f2fde38b146101e8578063ffa1ad741461020857600080fd5b8063031a66b6146100ac578063104bec29146100d757806312dbaf97146101075780633ccfd60b1461013457806351c732b01461014b57600080fd5b366100a757005b600080fd5b3480156100b857600080fd5b506100c161022b565b6040516100ce9190610c85565b60405180910390f35b3480156100e357600080fd5b506100f76100f2366004610ce7565b6103ef565b60405190151581526020016100ce565b34801561011357600080fd5b50610127610122366004610ce7565b610418565b6040516100ce9190610d00565b34801561014057600080fd5b50610149610592565b005b34801561015757600080fd5b50610149610166366004610dd9565b610637565b34801561017757600080fd5b50610149610979565b34801561018c57600080fd5b506000546040516001600160a01b0390911681526020016100ce565b3480156101b457600080fd5b506101496101c3366004610dd9565b61098d565b3480156101d457600080fd5b506101276101e3366004610e68565b610a7e565b3480156101f457600080fd5b50610149610203366004610e68565b610ac9565b34801561021457600080fd5b5061021d600081565b6040519081526020016100ce565b6060610235610b04565b6003805480602002602001604051908101604052809291908181526020016000905b828210156103e65760008481526020908190206040805160a081019091526005850290910180546001600160a01b0316825260018101805492939192918401916102a090610e83565b80601f01602080910402602001604051908101604052809291908181526020018280546102cc90610e83565b80156103195780601f106102ee57610100808354040283529160200191610319565b820191906000526020600020905b8154815290600101906020018083116102fc57829003601f168201915b5050505050815260200160028201805461033290610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461035e90610e83565b80156103ab5780601f10610380576101008083540402835291602001916103ab565b820191906000526020600020905b81548152906001019060200180831161038e57829003601f168201915b505050918352505060038201546020808301919091526004909201546001600160a01b03166040909101529082526001929092019101610257565b50505050905090565b6000818152600160205260408120600201805482919061040e90610e83565b9050119050919050565b610420610b81565b600082815260016020818152604092839020835160a0810190945280546001600160a01b0316845291820180549184019161045a90610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461048690610e83565b80156104d35780601f106104a8576101008083540402835291602001916104d3565b820191906000526020600020905b8154815290600101906020018083116104b657829003601f168201915b505050505081526020016002820180546104ec90610e83565b80601f016020809104026020016040519081016040528092919081815260200182805461051890610e83565b80156105655780601f1061053a57610100808354040283529160200191610565565b820191906000526020600020905b81548152906001019060200180831161054857829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b031660409091015292915050565b61059a610b04565b600080546040516001600160a01b039091169047908381818185875af1925050503d80600081146105e7576040519150601f19603f3d011682016040523d82523d6000602084013e6105ec565b606091505b50509050806106345760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b50565b600082815260016020819052604090912001805461065490610e83565b1590506106ba5760405162461bcd60e51b815260206004820152602e60248201527f5573657220616c7265616479207265676973746572656420776974682074686960448201526d3990383437b73290373ab6b132b960911b606482015260840161062b565b600082815260016020526040902060020180546106d690610e83565b1590506107355760405162461bcd60e51b815260206004820152602760248201527f5573657220616c726561647920726567697374657265642077697468207468696044820152661cc8195b585a5b60ca1b606482015260840161062b565b6040805160a0810182526001600160a01b0387811682526020808301888152838501889052606084018790528583166080850152600087815260019283905294909420835181546001600160a01b0319169316929092178255925191928392908201906107a29082610f0c565b50604082015160028201906107b79082610f0c565b5060608201516003820155608090910151600490910180546001600160a01b039283166001600160a01b0319918216179091558782166000908152600260209081526040909120845181549416939092169290921781559082015182919060018201906108249082610f0c565b50604082015160028201906108399082610f0c565b506060820151600382810191909155608090920151600490910180546001600160a01b03199081166001600160a01b0393841617909155825460018101845560009390935283517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600590940293840180549092169216919091178155602083015183927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c01906108ea9082610f0c565b50604082015160028201906108ff9082610f0c565b5060608201516003820155608090910151600490910180546001600160a01b0319166001600160a01b03928316179055604051908716907f9c65fc21979c240ad31c9d5ee6e2988ea49174c6e589c43ca3d098698f0b633490610969908890889088908890610fcc565b60405180910390a2505050505050565b610981610b04565b61098b6000610b31565b565b6001600160a01b03858116600090815260026020526040902054166109e55760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b604482015260640161062b565b6001600160a01b038516600090815260026020526040902060018101610a0b8682610f0c565b5060028101610a1a8582610f0c565b50600381018390556004810180546001600160a01b0319166001600160a01b038416179055856001600160a01b03167f19321fafce3f8052abe3f9b2d1653f2607a2e7533e17f4080ad8cb0f4bda2bac868686866040516109699493929190610fcc565b610a86610b81565b6001600160a01b03808316600090815260026020908152604091829020825160a08101909352805490931682526001830180549293929184019161045a90610e83565b610ad1610b04565b6001600160a01b038116610afb57604051631e4fbdf760e01b81526000600482015260240161062b565b61063481610b31565b6000546001600160a01b0316331461098b5760405163118cdaa760e01b815233600482015260240161062b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060a0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160006001600160a01b031681525090565b80821115610bd65760008155600101610bc2565b5090565b6000815180845260005b81811015610c0057602081850181015186830182015201610be4565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b03808351168452602083015160a06020860152610c4860a0860182610bda565b905060408401518582036040870152610c618282610bda565b91505060608401516060860152816080850151166080860152809250505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610cda57603f19888603018452610cc8858351610c20565b94509285019290850190600101610cac565b5092979650505050505050565b600060208284031215610cf957600080fd5b5035919050565b602081526000610d136020830184610c20565b9392505050565b80356001600160a01b0381168114610d3157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610d5d57600080fd5b813567ffffffffffffffff80821115610d7857610d78610d36565b604051601f8301601f19908116603f01168101908282118183101715610da057610da0610d36565b81604052838152866020858801011115610db957600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a08688031215610df157600080fd5b610dfa86610d1a565b9450602086013567ffffffffffffffff80821115610e1757600080fd5b610e2389838a01610d4c565b95506040880135915080821115610e3957600080fd5b50610e4688828901610d4c565b93505060608601359150610e5c60808701610d1a565b90509295509295909350565b600060208284031215610e7a57600080fd5b610d1382610d1a565b600181811c90821680610e9757607f821691505b602082108103610eb757634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610f0757600081815260208120601f850160051c81016020861015610ee45750805b601f850160051c820191505b81811015610f0357828155600101610ef0565b5050505b505050565b815167ffffffffffffffff811115610f2657610f26610d36565b610f3a81610f348454610e83565b84610ebd565b602080601f831160018114610f6f5760008415610f575750858301515b600019600386901b1c1916600185901b178555610f03565b600085815260208120601f198616915b82811015610f9e57888601518255948401946001909101908401610f7f565b5085821015610fbc5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608081526000610fdf6080830187610bda565b8281036020840152610ff18187610bda565b604084019590955250506001600160a01b039190911660609091015292915050565b838110156110335782860154825560019586019590910190602001611013565b5085831015610fbc5793015460001960f8600387901b161c19169092555050600190811b0190555056fea26469706673582212204a5e880d7cc5e42e56b208ebbb0b4ea7b92bcc4f6c406b100cd6bb0e6da4538d64736f6c63430008140033",
  "devdoc": {
    "author": "Danny Thomx",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "editHackerData(address,string,string,uint256,address)": {
        "params": {
          "_email": "The new email of the hacker.",
          "_hackerAddress": "The address of the hacker.",
          "_lockAddress": "The new class address associated with the hacker.",
          "_name": "The new name of the hacker.",
          "_number": "The new phone number of the hacker."
        }
      },
      "getAllHackers()": {
        "returns": {
          "_0": "An array of HackerData containing all registered hackers."
        }
      },
      "getHackerDataByAddress(address)": {
        "params": {
          "userAddress": "The address of the hacker."
        },
        "returns": {
          "user": "The HackerData associated with the address."
        }
      },
      "getHackerDataByPhone(uint256)": {
        "params": {
          "_phone": "The phone number of the hacker."
        },
        "returns": {
          "user": "The HackerData associated with the phone number."
        }
      },
      "isHackerRegistered(uint256)": {
        "params": {
          "_number": "The phone number to check."
        },
        "returns": {
          "_0": "True if the hacker is registered, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerHacker(address,string,string,uint256,address)": {
        "params": {
          "_email": "The email of the hacker.",
          "_hackerAddress": "The address of the hacker.",
          "_lockAddress": "The class address associated with the hacker.",
          "_name": "The name of the hacker.",
          "_number": "The phone number of the hacker."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Only callable by the contract owner."
      }
    },
    "title": "ETHRwanda Hackathon Genesis Registry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "HackerDataEdited(address,string,string,uint256,address)": {
        "notice": "Event emitted when a hacker's data is edited"
      },
      "HackerRegistered(address,string,string,uint256,address)": {
        "notice": "Event emitted when a new hacker is registered"
      }
    },
    "kind": "user",
    "methods": {
      "editHackerData(address,string,string,uint256,address)": {
        "notice": "Edits existing hacker data."
      },
      "getAllHackers()": {
        "notice": "Retrieves all registered hackers."
      },
      "getHackerDataByAddress(address)": {
        "notice": "Retrieves hacker data by address."
      },
      "getHackerDataByPhone(uint256)": {
        "notice": "Retrieves hacker data by phone number."
      },
      "isHackerRegistered(uint256)": {
        "notice": "Checks if a hacker is registered by phone number."
      },
      "registerHacker(address,string,string,uint256,address)": {
        "notice": "Registers a new hacker."
      },
      "withdraw()": {
        "notice": "Withdraws all Ether from the contract to the owner's address."
      }
    },
    "notice": "This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 211,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "hackersByPhone",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(HackerData)195_storage)"
      },
      {
        "astId": 216,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "hackersByAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(HackerData)195_storage)"
      },
      {
        "astId": 220,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "users",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(HackerData)195_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(HackerData)195_storage)dyn_storage": {
        "base": "t_struct(HackerData)195_storage",
        "encoding": "dynamic_array",
        "label": "struct ETHRwandaHackathonGenesisRegistry.HackerData[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(HackerData)195_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ETHRwandaHackathonGenesisRegistry.HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)195_storage"
      },
      "t_mapping(t_uint256,t_struct(HackerData)195_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ETHRwandaHackathonGenesisRegistry.HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)195_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HackerData)195_storage": {
        "encoding": "inplace",
        "label": "struct ETHRwandaHackathonGenesisRegistry.HackerData",
        "members": [
          {
            "astId": 186,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "hackerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 188,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 190,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 192,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "number",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 194,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "class",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
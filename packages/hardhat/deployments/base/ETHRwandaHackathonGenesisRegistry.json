{
  "address": "0xdBD8D571a96FCc7A4B468837937495446Bb069a5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RegistrationsClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyRegisteredWithEmail",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyRegisteredWithPhone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        }
      ],
      "name": "HackerDataEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hackerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "class",
          "type": "address"
        }
      ],
      "name": "HackerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        }
      ],
      "name": "RegistrationStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RwCollectibleTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RwETHTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RwTokenTransfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areRegistrationsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData[]",
          "name": "_hackers",
          "type": "tuple[]"
        }
      ],
      "name": "batchRegisterHackers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockAddress",
          "type": "address"
        }
      ],
      "name": "editHackerData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHackers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAreRegistrationsOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getHackerDataByAddress",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData",
          "name": "user",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_phone",
          "type": "uint256"
        }
      ],
      "name": "getHackerDataByPhone",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "hackerAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "class",
              "type": "address"
            }
          ],
          "internalType": "struct ETHRwandaHackathonGenesisRegistry.HackerData",
          "name": "user",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "isHackerRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hackerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockAddress",
          "type": "address"
        }
      ],
      "name": "registerHacker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendEther",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_areRegistrationsOpen",
          "type": "bool"
        }
      ],
      "name": "setRegistrationsStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferERC721",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x559f42e8e20ee9c70b21338c96875ff87327b39a45dfbf8299d3f9a240a4eb1a",
  "receipt": {
    "to": null,
    "from": "0x87B010d21D0ee095Fe6916241C56dB98a4cc52cA",
    "contractAddress": "0xdBD8D571a96FCc7A4B468837937495446Bb069a5",
    "transactionIndex": 80,
    "gasUsed": "1448689",
    "logsBloom": "0x
    "blockHash": "0x300a5f8a4799f261009cb72795fafddf18a3bffc11b2f7686a0952b24a94dd6b",
    "transactionHash": "0x559f42e8e20ee9c70b21338c96875ff87327b39a45dfbf8299d3f9a240a4eb1a",
    "logs": [
      {
        "transactionIndex": 80,
        "blockNumber": 21224197,
        "transactionHash": "0x559f42e8e20ee9c70b21338c96875ff87327b39a45dfbf8299d3f9a240a4eb1a",
        "address": "0xdBD8D571a96FCc7A4B468837937495446Bb069a5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000087b010d21d0ee095fe6916241c56db98a4cc52ca"
        ],
        "data": "0x",
        "logIndex": 322,
        "blockHash": "0x300a5f8a4799f261009cb72795fafddf18a3bffc11b2f7686a0952b24a94dd6b"
      }
    ],
    "blockNumber": 21224197,
    "cumulativeGasUsed": "35108908",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "36cf951fdcf43b6cf2f8bf3bdf6dfa91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RegistrationsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyRegisteredWithEmail\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyRegisteredWithPhone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserNotRegistered\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"}],\"name\":\"HackerDataEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"name\":\"HackerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"}],\"name\":\"RegistrationStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RwCollectibleTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RwETHTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RwTokenTransfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areRegistrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData[]\",\"name\":\"_hackers\",\"type\":\"tuple[]\"}],\"name\":\"batchRegisterHackers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"editHackerData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHackers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAreRegistrationsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getHackerDataByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phone\",\"type\":\"uint256\"}],\"name\":\"getHackerDataByPhone\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"class\",\"type\":\"address\"}],\"internalType\":\"struct ETHRwandaHackathonGenesisRegistry.HackerData\",\"name\":\"user\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"isHackerRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hackerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockAddress\",\"type\":\"address\"}],\"name\":\"registerHacker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_areRegistrationsOpen\",\"type\":\"bool\"}],\"name\":\"setRegistrationsStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Danny Thomx\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"batchRegisterHackers((address,string,string,uint256,address)[])\":{\"params\":{\"_hackers\":\"An array of HackerData structs to register.\"}},\"editHackerData(address,string,string,uint256,address)\":{\"params\":{\"_email\":\"The new email of the hacker.\",\"_hackerAddress\":\"The address of the hacker.\",\"_lockAddress\":\"The new class address associated with the hacker.\",\"_name\":\"The new name of the hacker.\",\"_number\":\"The new phone number of the hacker.\"}},\"getAllHackers()\":{\"returns\":{\"_0\":\"An array of HackerData containing all registered hackers.\"}},\"getAreRegistrationsOpen()\":{\"returns\":{\"_0\":\"True if registrations are open, false otherwise.\"}},\"getHackerDataByAddress(address)\":{\"params\":{\"userAddress\":\"The address of the hacker.\"},\"returns\":{\"user\":\"The HackerData associated with the address.\"}},\"getHackerDataByPhone(uint256)\":{\"params\":{\"_phone\":\"The phone number of the hacker.\"},\"returns\":{\"user\":\"The HackerData associated with the phone number.\"}},\"isHackerRegistered(uint256)\":{\"params\":{\"_number\":\"The phone number to check.\"},\"returns\":{\"_0\":\"True if the hacker is registered, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerHacker(address,string,string,uint256,address)\":{\"params\":{\"_email\":\"The email of the hacker.\",\"_hackerAddress\":\"The address of the hacker.\",\"_lockAddress\":\"The class address associated with the hacker.\",\"_name\":\"The name of the hacker.\",\"_number\":\"The phone number of the hacker.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendEther(address,uint256)\":{\"params\":{\"_amount\":\"The amount of Ether to send.\",\"_to\":\"The address to send Ether to.\"}},\"setRegistrationsStatus(bool)\":{\"details\":\"Only callable by the contract owner.\"},\"transferERC20(address,address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to transfer.\",\"_to\":\"The address to transfer tokens to.\",\"_token\":\"The ERC20 token contract.\"}},\"transferERC721(address,address,uint256)\":{\"params\":{\"_to\":\"The address to transfer tokens to.\",\"_token\":\"The ERC721 token contract.\",\"_tokenId\":\"The ID of the token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw()\":{\"details\":\"Only callable by the contract owner.\"}},\"title\":\"ETHRwanda Hackathon Genesis Registry\",\"version\":1},\"userdoc\":{\"events\":{\"HackerDataEdited(address)\":{\"notice\":\"Event emitted when a hacker's data is edited\"},\"HackerRegistered(address,address)\":{\"notice\":\"Event emitted when a new hacker is registered\"},\"RegistrationStatusChanged(bool)\":{\"notice\":\"Event emitted when registration status is changed\"}},\"kind\":\"user\",\"methods\":{\"batchRegisterHackers((address,string,string,uint256,address)[])\":{\"notice\":\"Batch registers hackers.\"},\"editHackerData(address,string,string,uint256,address)\":{\"notice\":\"Edits existing hacker data.\"},\"getAllHackers()\":{\"notice\":\"Retrieves all registered hackers.\"},\"getAreRegistrationsOpen()\":{\"notice\":\"Checks if registrations are open.\"},\"getHackerDataByAddress(address)\":{\"notice\":\"Retrieves hacker data by address.\"},\"getHackerDataByPhone(uint256)\":{\"notice\":\"Retrieves hacker data by phone number.\"},\"isHackerRegistered(uint256)\":{\"notice\":\"Checks if a hacker is registered by phone number.\"},\"registerHacker(address,string,string,uint256,address)\":{\"notice\":\"Registers a new hacker.\"},\"sendEther(address,uint256)\":{\"notice\":\"Sends Ether to a specified address.\"},\"setRegistrationsStatus(bool)\":{\"notice\":\"Opens registrations.\"},\"transferERC20(address,address,uint256)\":{\"notice\":\"Transfers ERC20 tokens to a specified address.\"},\"transferERC721(address,address,uint256)\":{\"notice\":\"Transfers ERC721 tokens to a specified address.\"},\"withdraw()\":{\"notice\":\"Withdraws all Ether from the contract to the owner's address.\"}},\"notice\":\"This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HackerOnboard.sol\":\"ETHRwandaHackathonGenesisRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/HackerOnboard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\n/// @title ETHRwanda Hackathon Genesis Registry\\r\\n/// @notice This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.\\r\\n/// @author Danny Thomx\\r\\ncontract ETHRwandaHackathonGenesisRegistry is Ownable {\\r\\n    // Custom error definitions\\r\\n    error UserNotRegistered();\\r\\n    error RegistrationsClosed();\\r\\n    error UserAlreadyRegisteredWithPhone();\\r\\n    error UserAlreadyRegisteredWithEmail();\\r\\n    error InsufficientBalance();\\r\\n    error TransferFailed();\\r\\n\\r\\n    /// @notice Structure to store hacker data.\\r\\n    struct HackerData {\\r\\n        address hackerAddress;\\r\\n        string name;\\r\\n        string email;\\r\\n        uint256 number;\\r\\n        address class;\\r\\n    }\\r\\n\\r\\n    uint256 public constant VERSION = 0;\\r\\n    bool public areRegistrationsOpen = false; // State variable to track registration status\\r\\n\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    mapping(uint256 => HackerData) private hackersByPhone;\\r\\n    mapping(address => HackerData) private hackersByAddress;\\r\\n    HackerData[] private users; // List to store all users\\r\\n\\r\\n    /// @notice Event emitted when a new hacker is registered\\r\\n    event HackerRegistered(address indexed hackerAddress, address class);\\r\\n\\r\\n    /// @notice Event emitted when a hacker's data is edited\\r\\n    event HackerDataEdited(address indexed hackerAddress);\\r\\n\\r\\n    /// @notice Event emitted when registration status is changed\\r\\n    event RegistrationStatusChanged(bool isOpen);\\r\\n\\r\\n    event RwETHTransfer(address indexed from, address indexed to, uint256 amount);\\r\\n    event RwTokenTransfer(address indexed from, address indexed to, address token, uint256 amount);\\r\\n    event RwCollectibleTransfer(address indexed from, address indexed to, address token, uint256 tokenId);\\r\\n\\r\\n    /// @notice Fallback function to receive Ether.\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Withdraws all Ether from the contract to the owner's address.\\r\\n    /// @dev Only callable by the contract owner.\\r\\n    function withdraw() external onlyOwner {\\r\\n        (bool success, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n\\r\\n    /// @notice Opens registrations.\\r\\n    /// @dev Only callable by the contract owner.\\r\\n    function setRegistrationsStatus(bool _areRegistrationsOpen) external onlyOwner {\\r\\n        areRegistrationsOpen = _areRegistrationsOpen;\\r\\n        emit RegistrationStatusChanged(_areRegistrationsOpen);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if registrations are open.\\r\\n    /// @return True if registrations are open, false otherwise.\\r\\n    function getAreRegistrationsOpen() public view returns (bool) {\\r\\n        return areRegistrationsOpen;\\r\\n    }\\r\\n\\r\\n    modifier onlyRegistered() {\\r\\n        if (hackersByAddress[msg.sender].hackerAddress == address(0)) revert UserNotRegistered();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Registers a new hacker.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @param _name The name of the hacker.\\r\\n    /// @param _email The email of the hacker.\\r\\n    /// @param _number The phone number of the hacker.\\r\\n    /// @param _lockAddress The class address associated with the hacker.\\r\\n    function registerHacker(\\r\\n        address _hackerAddress,\\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number,\\r\\n        address _lockAddress\\r\\n    ) public {\\r\\n        if (!areRegistrationsOpen) revert RegistrationsClosed();\\r\\n        if (bytes(hackersByPhone[_number].name).length != 0) revert UserAlreadyRegisteredWithPhone();\\r\\n        if (bytes(hackersByPhone[_number].email).length != 0) revert UserAlreadyRegisteredWithEmail();\\r\\n\\r\\n        HackerData memory newUser = HackerData({\\r\\n            hackerAddress: _hackerAddress,\\r\\n            name: _name,\\r\\n            email: _email,\\r\\n            number: _number,\\r\\n            class: _lockAddress\\r\\n        });\\r\\n\\r\\n        hackersByPhone[_number] = newUser;\\r\\n        hackersByAddress[_hackerAddress] = newUser;\\r\\n        users.push(newUser);\\r\\n\\r\\n        emit HackerRegistered(_hackerAddress, _lockAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves all registered hackers.\\r\\n    /// @return An array of HackerData containing all registered hackers.\\r\\n    function getAllHackers() public onlyOwner view returns (HackerData[] memory) {\\r\\n        return users;\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves hacker data by phone number.\\r\\n    /// @param _phone The phone number of the hacker.\\r\\n    /// @return user The HackerData associated with the phone number.\\r\\n    function getHackerDataByPhone(uint256 _phone) public view returns (HackerData memory user) {\\r\\n        return hackersByPhone[_phone];\\r\\n    }\\r\\n\\r\\n    /// @notice Retrieves hacker data by address.\\r\\n    /// @param userAddress The address of the hacker.\\r\\n    /// @return user The HackerData associated with the address.\\r\\n    function getHackerDataByAddress(address userAddress) public view returns (HackerData memory user) {\\r\\n        return hackersByAddress[userAddress];\\r\\n    }\\r\\n\\r\\n    /// @notice Edits existing hacker data.\\r\\n    /// @param _hackerAddress The address of the hacker.\\r\\n    /// @param _name The new name of the hacker.\\r\\n    /// @param _email The new email of the hacker.\\r\\n    /// @param _number The new phone number of the hacker.\\r\\n    /// @param _lockAddress The new class address associated with the hacker.\\r\\n    function editHackerData(\\r\\n        address _hackerAddress,\\r\\n        string memory _name,\\r\\n        string memory _email,\\r\\n        uint256 _number,\\r\\n        address _lockAddress\\r\\n    ) public {\\r\\n        require(hackersByAddress[_hackerAddress].hackerAddress != address(0), \\\"User not found\\\");\\r\\n\\r\\n        HackerData storage hackerData = hackersByAddress[_hackerAddress];\\r\\n\\r\\n        // Update user data\\r\\n        hackerData.name = _name;\\r\\n        hackerData.email = _email;\\r\\n        hackerData.number = _number;\\r\\n        hackerData.class = _lockAddress;\\r\\n\\r\\n        // Update phone mapping if the number has changed\\r\\n        if (hackerData.number != _number) {\\r\\n            delete hackersByPhone[hackerData.number];\\r\\n            hackersByPhone[_number] = hackerData;\\r\\n        }\\r\\n\\r\\n        emit HackerDataEdited(_hackerAddress);\\r\\n    }\\r\\n\\r\\n    /// @notice Checks if a hacker is registered by phone number.\\r\\n    /// @param _number The phone number to check.\\r\\n    /// @return True if the hacker is registered, false otherwise.\\r\\n    function isHackerRegistered(uint256 _number) public view returns (bool) {\\r\\n        return bytes(hackersByPhone[_number].email).length > 0;\\r\\n    }\\r\\n\\r\\n    /// @notice Batch registers hackers.\\r\\n    /// @param _hackers An array of HackerData structs to register.\\r\\n    function batchRegisterHackers(HackerData[] memory _hackers) external onlyOwner {\\r\\n        require(areRegistrationsOpen, \\\"Registrations are closed\\\");\\r\\n        for (uint256 i = 0; i < _hackers.length; i++) {\\r\\n            registerHacker(\\r\\n                _hackers[i].hackerAddress,\\r\\n                _hackers[i].name,\\r\\n                _hackers[i].email,\\r\\n                _hackers[i].number,\\r\\n                _hackers[i].class\\r\\n            );\\r\\n            emit HackerRegistered(_hackers[i].hackerAddress, _hackers[i].class);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Sends Ether to a specified address.\\r\\n    /// @param _to The address to send Ether to.\\r\\n    /// @param _amount The amount of Ether to send.\\r\\n    function sendEther(address payable _to, uint256 _amount) external onlyRegistered {\\r\\n        if (address(this).balance < _amount) revert InsufficientBalance();\\r\\n        (bool success, ) = _to.call{value: _amount}(\\\"\\\");\\r\\n        if (!success) revert TransferFailed();\\r\\n        emit RwETHTransfer(msg.sender, _to, _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ERC20 tokens to a specified address.\\r\\n    /// @param _token The ERC20 token contract.\\r\\n    /// @param _to The address to transfer tokens to.\\r\\n    /// @param _amount The amount of tokens to transfer.\\r\\n    function transferERC20(IERC20 _token, address _to, uint256 _amount) external onlyRegistered {\\r\\n        if (!_token.transferFrom(msg.sender, _to, _amount)) revert TransferFailed();\\r\\n        emit RwTokenTransfer(msg.sender, _to, address(_token), _amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Transfers ERC721 tokens to a specified address.\\r\\n    /// @param _token The ERC721 token contract.\\r\\n    /// @param _to The address to transfer tokens to.\\r\\n    /// @param _tokenId The ID of the token to transfer.\\r\\n    function transferERC721(IERC721 _token, address _to, uint256 _tokenId) external onlyRegistered {\\r\\n        _token.safeTransferFrom(msg.sender, _to, _tokenId);\\r\\n        emit RwCollectibleTransfer(msg.sender, _to, address(_token), _tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa657bfee18365035cf5f17b3877e74548722bdd01cff0526476f76a0eb68145d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000805460ff60a01b1916905534801561001d57600080fd5b50338061004457604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61004d81610053565b506100a3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6118c3806100b26000396000f3fe60806040526004361061010c5760003560e01c8063715018a611610095578063bb29ccc611610064578063bb29ccc6146102d4578063c1756a2c146102f4578063ea754cd014610314578063f2fde38b14610334578063ffa1ad741461035457600080fd5b8063715018a6146102575780638da5cb5b1461026c5780639db5dbe414610294578063a7f66743146102b457600080fd5b80631aca6376116100dc5780631aca6376146101c25780631fa4dc52146101e25780633ccfd60b1461020357806351c732b01461021857806369254d401461023857600080fd5b8062a170c914610118578063031a66b61461013a578063104bec291461016557806312dbaf971461019557600080fd5b3661011357005b600080fd5b34801561012457600080fd5b506101386101333660046111dd565b610377565b005b34801561014657600080fd5b5061014f6103d7565b60405161015c91906112ac565b60405180910390f35b34801561017157600080fd5b5061018561018036600461130e565b61059b565b604051901515815260200161015c565b3480156101a157600080fd5b506101b56101b036600461130e565b6105c4565b60405161015c9190611327565b3480156101ce57600080fd5b506101386101dd36600461134f565b61073e565b3480156101ee57600080fd5b5060005461018590600160a01b900460ff1681565b34801561020f57600080fd5b5061013861082a565b34801561022457600080fd5b50610138610233366004611470565b6108cf565b34801561024457600080fd5b50600054600160a01b900460ff16610185565b34801561026357600080fd5b50610138610bad565b34801561027857600080fd5b506000546040516001600160a01b03909116815260200161015c565b3480156102a057600080fd5b506101386102af36600461134f565b610bc1565b3480156102c057600080fd5b506101386102cf366004611470565b610cd2565b3480156102e057600080fd5b506101b56102ef366004611505565b610dc0565b34801561030057600080fd5b5061013861030f366004611522565b610e0b565b34801561032057600080fd5b5061013861032f36600461154e565b610f13565b34801561034057600080fd5b5061013861034f366004611505565b6110be565b34801561036057600080fd5b50610369600081565b60405190815260200161015c565b61037f6110f9565b60008054821515600160a01b0260ff60a01b199091161790556040517f1a30f630d0950ddfc90d43ec4e405fd012ddb4ba669dd2bd5e95439631c4221f906103cc90831515815260200190565b60405180910390a150565b60606103e16110f9565b6003805480602002602001604051908101604052809291908181526020016000905b828210156105925760008481526020908190206040805160a081019091526005850290910180546001600160a01b03168252600181018054929391929184019161044c906116a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610478906116a0565b80156104c55780601f1061049a576101008083540402835291602001916104c5565b820191906000526020600020905b8154815290600101906020018083116104a857829003601f168201915b505050505081526020016002820180546104de906116a0565b80601f016020809104026020016040519081016040528092919081815260200182805461050a906116a0565b80156105575780601f1061052c57610100808354040283529160200191610557565b820191906000526020600020905b81548152906001019060200180831161053a57829003601f168201915b505050918352505060038201546020808301919091526004909201546001600160a01b03166040909101529082526001929092019101610403565b50505050905090565b600081815260016020526040812060020180548291906105ba906116a0565b9050119050919050565b6105cc611176565b600082815260016020818152604092839020835160a0810190945280546001600160a01b03168452918201805491840191610606906116a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610632906116a0565b801561067f5780601f106106545761010080835404028352916020019161067f565b820191906000526020600020905b81548152906001019060200180831161066257829003601f168201915b50505050508152602001600282018054610698906116a0565b80601f01602080910402602001604051908101604052809291908181526020018280546106c4906116a0565b80156107115780601f106106e657610100808354040283529160200191610711565b820191906000526020600020905b8154815290600101906020018083116106f457829003601f168201915b5050509183525050600382015460208201526004909101546001600160a01b031660409091015292915050565b336000908152600260205260409020546001600160a01b031661077457604051632163950f60e01b815260040160405180910390fd5b604051632142170760e11b81523360048201526001600160a01b038381166024830152604482018390528416906342842e0e90606401600060405180830381600087803b1580156107c457600080fd5b505af11580156107d8573d6000803e3d6000fd5b5050604080516001600160a01b03878116825260208201869052861693503392507fa7418bd3094e0f5ece1f8051255ef65d992cefcb0631709d897d8a859442f92991015b60405180910390a3505050565b6108326110f9565b600080546040516001600160a01b039091169047908381818185875af1925050503d806000811461087f576040519150601f19603f3d011682016040523d82523d6000602084013e610884565b606091505b50509050806108cc5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b50565b600054600160a01b900460ff166108f957604051632596f79960e01b815260040160405180910390fd5b6000828152600160208190526040909120018054610916906116a0565b15905061093657604051630b78cb0160e31b815260040160405180910390fd5b60008281526001602052604090206002018054610952906116a0565b1590506109725760405163652725eb60e11b815260040160405180910390fd5b6040805160a0810182526001600160a01b0387811682526020808301888152838501889052606084018790528583166080850152600087815260019283905294909420835181546001600160a01b0319169316929092178255925191928392908201906109df9082611729565b50604082015160028201906109f49082611729565b5060608201516003820155608090910151600490910180546001600160a01b039283166001600160a01b031991821617909155878216600090815260026020908152604090912084518154941693909216929092178155908201518291906001820190610a619082611729565b5060408201516002820190610a769082611729565b506060820151600382810191909155608090920151600490910180546001600160a01b03199081166001600160a01b0393841617909155825460018101845560009390935283517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b600590940293840180549092169216919091178155602083015183927fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c0190610b279082611729565b5060408201516002820190610b3c9082611729565b5060608201516003820155608090910151600490910180546001600160a01b0319166001600160a01b039283161790556040518382168152908716907f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c9060200160405180910390a2505050505050565b610bb56110f9565b610bbf6000611126565b565b336000908152600260205260409020546001600160a01b0316610bf757604051632163950f60e01b815260040160405180910390fd5b6040516323b872dd60e01b81523360048201526001600160a01b038381166024830152604482018390528416906323b872dd906064016020604051808303816000875af1158015610c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7091906117e9565b610c8d576040516312171d8360e31b815260040160405180910390fd5b604080516001600160a01b0385811682526020820184905284169133917fb7a2adcaba30b7e13cf165014f76f31abfa2b823191171dabef01298a02f5b14910161081d565b6001600160a01b0385811660009081526002602052604090205416610d2a5760405162461bcd60e51b815260206004820152600e60248201526d155cd95c881b9bdd08199bdd5b9960921b60448201526064016108c3565b6001600160a01b038516600090815260026020526040902060018101610d508682611729565b5060028101610d5f8582611729565b50600381018390556004810180546001600160a01b0319166001600160a01b0384161790556040516001600160a01b038716907f899e426a1145f5a7442566cb6f469b4a55da6844560a30d29ef1ed98e4387cac90600090a2505050505050565b610dc8611176565b6001600160a01b03808316600090815260026020908152604091829020825160a081019093528054909316825260018301805492939291840191610606906116a0565b336000908152600260205260409020546001600160a01b0316610e4157604051632163950f60e01b815260040160405180910390fd5b80471015610e6257604051631e9acf1760e31b815260040160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610eaf576040519150601f19603f3d011682016040523d82523d6000602084013e610eb4565b606091505b5050905080610ed6576040516312171d8360e31b815260040160405180910390fd5b6040518281526001600160a01b0384169033907f0ed2f25f2e8fac60d5a381e78fd218e041217d544665747acac4cb9ab8e9c6179060200161081d565b610f1b6110f9565b600054600160a01b900460ff16610f745760405162461bcd60e51b815260206004820152601860248201527f526567697374726174696f6e732061726520636c6f736564000000000000000060448201526064016108c3565b60005b81518110156110ba5761101e828281518110610f9557610f95611850565b602002602001015160000151838381518110610fb357610fb3611850565b602002602001015160200151848481518110610fd157610fd1611850565b602002602001015160400151858581518110610fef57610fef611850565b60200260200101516060015186868151811061100d5761100d611850565b6020026020010151608001516108cf565b81818151811061103057611030611850565b6020026020010151600001516001600160a01b03167f2ee9bb10985d2baeb1f5ee83dc4b9a6a8bba35763f716ef99bb4b7ea21011d5c83838151811061107857611078611850565b6020026020010151608001516040516110a091906001600160a01b0391909116815260200190565b60405180910390a2806110b281611866565b915050610f77565b5050565b6110c66110f9565b6001600160a01b0381166110f057604051631e4fbdf760e01b8152600060048201526024016108c3565b6108cc81611126565b6000546001600160a01b03163314610bbf5760405163118cdaa760e01b81523360048201526024016108c3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040518060a0016040528060006001600160a01b0316815260200160608152602001606081526020016000815260200160006001600160a01b031681525090565b808211156111cb57600081556001016111b7565b5090565b80151581146108cc57600080fd5b6000602082840312156111ef57600080fd5b81356111fa816111cf565b9392505050565b6000815180845260005b818110156112275760208185018101518683018201520161120b565b506000602082860101526020601f19601f83011685010191505092915050565b600060018060a01b03808351168452602083015160a0602086015261126f60a0860182611201565b9050604084015185820360408701526112888282611201565b91505060608401516060860152816080850151166080860152809250505092915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561130157603f198886030184526112ef858351611247565b945092850192908501906001016112d3565b5092979650505050505050565b60006020828403121561132057600080fd5b5035919050565b6020815260006111fa6020830184611247565b6001600160a01b03811681146108cc57600080fd5b60008060006060848603121561136457600080fd5b833561136f8161133a565b9250602084013561137f8161133a565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156113c9576113c9611390565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156113f8576113f8611390565b604052919050565b600082601f83011261141157600080fd5b813567ffffffffffffffff81111561142b5761142b611390565b61143e601f8201601f19166020016113cf565b81815284602083860101111561145357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561148857600080fd5b85356114938161133a565b9450602086013567ffffffffffffffff808211156114b057600080fd5b6114bc89838a01611400565b955060408801359150808211156114d257600080fd5b506114df88828901611400565b9350506060860135915060808601356114f78161133a565b809150509295509295909350565b60006020828403121561151757600080fd5b81356111fa8161133a565b6000806040838503121561153557600080fd5b82356115408161133a565b946020939093013593505050565b6000602080838503121561156157600080fd5b823567ffffffffffffffff8082111561157957600080fd5b818501915085601f83011261158d57600080fd5b81358181111561159f5761159f611390565b8060051b6115ae8582016113cf565b91825283810185019185810190898411156115c857600080fd5b86860192505b83831015611693578235858111156115e557600080fd5b860160a0818c03601f190112156115fc5760008081fd5b6116046113a6565b888201356116118161133a565b8152604082810135888111156116275760008081fd5b6116358e8c83870101611400565b8b840152506060808401358981111561164e5760008081fd5b61165c8f8d83880101611400565b83850152506080915081840135818401525060a0830135925061167e8361133a565b810191909152825291860191908601906115ce565b9998505050505050505050565b600181811c908216806116b457607f821691505b6020821081036116d457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561172457600081815260208120601f850160051c810160208610156117015750805b601f850160051c820191505b818110156117205782815560010161170d565b5050505b505050565b815167ffffffffffffffff81111561174357611743611390565b6117578161175184546116a0565b846116da565b602080601f83116001811461178c57600084156117745750858301515b600019600386901b1c1916600185901b178555611720565b600085815260208120601f198616915b828110156117bb5788860151825594840194600190910190840161179c565b50858210156117d95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602082840312156117fb57600080fd5b81516111fa816111cf565b838110156118265782860154825560019586019590910190602001611806565b50858310156117d95793015460001960f8600387901b161c19169092555050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b60006001820161188657634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220c3a43b3462dc133f2a316f29bae04c283d9447e2a731a15a3422c756341c931c64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Danny Thomx",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "batchRegisterHackers((address,string,string,uint256,address)[])": {
        "params": {
          "_hackers": "An array of HackerData structs to register."
        }
      },
      "editHackerData(address,string,string,uint256,address)": {
        "params": {
          "_email": "The new email of the hacker.",
          "_hackerAddress": "The address of the hacker.",
          "_lockAddress": "The new class address associated with the hacker.",
          "_name": "The new name of the hacker.",
          "_number": "The new phone number of the hacker."
        }
      },
      "getAllHackers()": {
        "returns": {
          "_0": "An array of HackerData containing all registered hackers."
        }
      },
      "getAreRegistrationsOpen()": {
        "returns": {
          "_0": "True if registrations are open, false otherwise."
        }
      },
      "getHackerDataByAddress(address)": {
        "params": {
          "userAddress": "The address of the hacker."
        },
        "returns": {
          "user": "The HackerData associated with the address."
        }
      },
      "getHackerDataByPhone(uint256)": {
        "params": {
          "_phone": "The phone number of the hacker."
        },
        "returns": {
          "user": "The HackerData associated with the phone number."
        }
      },
      "isHackerRegistered(uint256)": {
        "params": {
          "_number": "The phone number to check."
        },
        "returns": {
          "_0": "True if the hacker is registered, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerHacker(address,string,string,uint256,address)": {
        "params": {
          "_email": "The email of the hacker.",
          "_hackerAddress": "The address of the hacker.",
          "_lockAddress": "The class address associated with the hacker.",
          "_name": "The name of the hacker.",
          "_number": "The phone number of the hacker."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendEther(address,uint256)": {
        "params": {
          "_amount": "The amount of Ether to send.",
          "_to": "The address to send Ether to."
        }
      },
      "setRegistrationsStatus(bool)": {
        "details": "Only callable by the contract owner."
      },
      "transferERC20(address,address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to transfer.",
          "_to": "The address to transfer tokens to.",
          "_token": "The ERC20 token contract."
        }
      },
      "transferERC721(address,address,uint256)": {
        "params": {
          "_to": "The address to transfer tokens to.",
          "_token": "The ERC721 token contract.",
          "_tokenId": "The ID of the token to transfer."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw()": {
        "details": "Only callable by the contract owner."
      }
    },
    "title": "ETHRwanda Hackathon Genesis Registry",
    "version": 1
  },
  "userdoc": {
    "events": {
      "HackerDataEdited(address)": {
        "notice": "Event emitted when a hacker's data is edited"
      },
      "HackerRegistered(address,address)": {
        "notice": "Event emitted when a new hacker is registered"
      },
      "RegistrationStatusChanged(bool)": {
        "notice": "Event emitted when registration status is changed"
      }
    },
    "kind": "user",
    "methods": {
      "batchRegisterHackers((address,string,string,uint256,address)[])": {
        "notice": "Batch registers hackers."
      },
      "editHackerData(address,string,string,uint256,address)": {
        "notice": "Edits existing hacker data."
      },
      "getAllHackers()": {
        "notice": "Retrieves all registered hackers."
      },
      "getAreRegistrationsOpen()": {
        "notice": "Checks if registrations are open."
      },
      "getHackerDataByAddress(address)": {
        "notice": "Retrieves hacker data by address."
      },
      "getHackerDataByPhone(uint256)": {
        "notice": "Retrieves hacker data by phone number."
      },
      "isHackerRegistered(uint256)": {
        "notice": "Checks if a hacker is registered by phone number."
      },
      "registerHacker(address,string,string,uint256,address)": {
        "notice": "Registers a new hacker."
      },
      "sendEther(address,uint256)": {
        "notice": "Sends Ether to a specified address."
      },
      "setRegistrationsStatus(bool)": {
        "notice": "Opens registrations."
      },
      "transferERC20(address,address,uint256)": {
        "notice": "Transfers ERC20 tokens to a specified address."
      },
      "transferERC721(address,address,uint256)": {
        "notice": "Transfers ERC721 tokens to a specified address."
      },
      "withdraw()": {
        "notice": "Withdraws all Ether from the contract to the owner's address."
      }
    },
    "notice": "This contract manages the registration and data of hackers participating in the ETH Rwanda Genesis Hackathon.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 422,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "areRegistrationsOpen",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 435,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "hackersByPhone",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(HackerData)416_storage)"
      },
      {
        "astId": 440,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "hackersByAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(HackerData)416_storage)"
      },
      {
        "astId": 444,
        "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
        "label": "users",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(HackerData)416_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(HackerData)416_storage)dyn_storage": {
        "base": "t_struct(HackerData)416_storage",
        "encoding": "dynamic_array",
        "label": "struct ETHRwandaHackathonGenesisRegistry.HackerData[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(HackerData)416_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ETHRwandaHackathonGenesisRegistry.HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)416_storage"
      },
      "t_mapping(t_uint256,t_struct(HackerData)416_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ETHRwandaHackathonGenesisRegistry.HackerData)",
        "numberOfBytes": "32",
        "value": "t_struct(HackerData)416_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(HackerData)416_storage": {
        "encoding": "inplace",
        "label": "struct ETHRwandaHackathonGenesisRegistry.HackerData",
        "members": [
          {
            "astId": 407,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "hackerAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 409,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 411,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "email",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 413,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "number",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 415,
            "contract": "contracts/HackerOnboard.sol:ETHRwandaHackathonGenesisRegistry",
            "label": "class",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}